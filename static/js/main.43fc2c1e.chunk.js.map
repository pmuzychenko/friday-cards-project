{"version":3,"sources":["components/pages/Error404/Error404.tsx","api/api.ts","reducers/app-reducer.ts","reducers/login-reducer.ts","components/pages/Login/Login.tsx","reducers/password-recovery-reducer.ts","components/pages/PasswordRecovery/PasswordRecovery.tsx","components/pages/Profile/Profile.tsx","reducers/set-new-password-reducer.ts","components/pages/SetNewPassword/SetNewPassword.tsx","reducers/signUp-reducer.ts","components/pages/SignUp/SignUp.tsx","components/Routes/Routes.tsx","components/Header/Header.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","assets/images/preloader.gif","components/Preloader/Preloader.tsx","components/App/App.tsx","reducers/profile-reducer.ts","reducers/store.ts","reportWebVitals.ts","index.tsx","components/pages/Login/Login.module.css","components/Routes/Routes.module.css","components/pages/Error404/Error404.module.css","components/pages/PasswordRecovery/PasswordRecovery.module.css","components/pages/Profile/Profile.module.css","components/Preloader/Preloader.module.css"],"names":["Error404","className","styles","error404","instance","axios","create","baseURL","withCredentials","RequestForgetPasswordObject","email","from","message","api","data","post","delete","password","resetPasswordToken","initialState","status","error","setAppStatusAC","type","setAppErrorAC","isLoggedIn","setUserDataAC","setIsLoggedInAC","value","Login","dispatch","useDispatch","isUserLoggedIn","useSelector","state","login","formik","useFormik","initialValues","rememberMe","validate","values","errors","test","length","onSubmit","then","res","catch","e","response","resetForm","to","loginFormContainer","handleSubmit","FormControl","FormGroup","TextField","label","margin","getFieldProps","touched","style","color","FormControlLabel","control","Checkbox","onChange","handleChange","checked","name","Button","variant","forgetPasswordContainer","PATH","passwordRecovery","info","isMailSent","isMailSentAC","PasswordRecovery","sentMailResponse","Profile","userProfileData","useEffect","profile","avatar","passwordIsSet","SetNewPassword","newPassword","useParams","repeatPassword","changePasswordTC","isSignUp","setIsSignUpAC","SignUp","registration","signUp","Routes","currentDisplay","exact","path","render","useStyles","makeStyles","theme","root","flexGrow","backgroundColor","palette","background","paper","Header","useState","selectedTab","setSelectedTab","classes","event","newValue","AppBar","position","Tabs","aria-label","Tab","component","Link","onClick","Alert","props","elevation","ErrorSnackbar","app","isOpen","Snackbar","open","autoHideDuration","onClose","reason","severity","Preloader","loader","src","preloader","alt","App","reducers","combineReducers","action","store","createStore","applyMiddleware","thunk","window","console","log","getState","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById","module","exports"],"mappings":"yUAGaA,EAAW,WACpB,OACI,sBAAKC,UAAWC,IAAOC,SAAvB,UACI,sCACA,kDACA,0F,8FCJNC,E,OAAWC,EAAMC,OAAO,CAC1BC,QAAQ,sCAERC,iBAAiB,IAGfC,EAAyD,CAC3DC,MAAO,GACPC,KAAK,qCACLC,QAAQ,yLAKCC,EAAM,SACTC,GACF,OAAOV,EAASW,KAA2B,cAAeD,IAFrDD,EAAM,WAKX,OAAOT,EAASY,OAAO,WAAY,KAL9BH,EAAM,WAQX,OAAOT,EAASW,KAAK,WAAY,KAR5BF,EAAM,SAURH,EAAeO,GAClB,OAAOb,EAASW,KAAT,gBAAmD,CAAEL,QAAOO,cAX9DJ,EAAM,SAaAH,GACX,OAAON,EAASW,KAAT,yCAA6DN,GAA7D,IAA0FC,YAd5FG,EAAM,SAgBCI,EAAkBC,GAC9B,OAAOd,EAASW,KAAT,wBAAgE,CACnEE,WACAC,wBCjCNC,EAAe,CACjBC,OAAQ,OACRC,MAAO,MAwBEC,EAAiB,SAACF,GAAD,MAAgC,CAACG,KAAM,iBAAkBH,WAC1EI,EAAgB,SAACH,GAAD,MAA+B,CAACE,KAAM,gBAAiBF,UCf9EF,EAA6B,CAC/BL,KAAM,KACNW,YAAY,GAgBHC,EAAgB,SAACZ,GAAD,MACxB,CAAES,KAAM,sBAAuBT,SAEvBa,EAAkB,SAACC,GAAD,MAC1B,CAAEL,KAAM,yBAA0BK,UCpB1BC,EAAQ,WACjB,IAAMC,EAAWC,cACXC,EAAiBC,aAAuC,SAAAC,GAAK,OAAIA,EAAMC,MAAMV,cAE7EW,EAASC,YAAU,CACrBC,cAAe,CACX5B,MAAO,GACPO,SAAU,GACVsB,YAAY,GAEhBC,SAAU,SAACC,GACP,IAAMC,EAA0B,GAYhC,OAXKD,EAAO/B,MAEA,4CAA4CiC,KAAKF,EAAO/B,SAChEgC,EAAOhC,MAAQ,yBAFfgC,EAAOhC,MAAQ,WAKd+B,EAAOxB,SAEDwB,EAAOxB,SAAS2B,OAAS,IAChCF,EAAOzB,SAAW,oBAFlByB,EAAOzB,SAAW,WAIfyB,GAEXG,SAAU,SAAAJ,GDFK,IAAC3B,ECGZgB,GDHYhB,ECGK2B,EDHmB,SAACX,GAC7CA,EAASR,EAAe,YACxBT,EAAUC,GACLgC,MAAK,SAACC,GACHjB,EAASR,EAAe,cACxBQ,EAASH,GAAgB,IACzBG,EAASJ,EAAcqB,EAAIjC,UAE9BkC,OAAM,SAACC,GACJnB,EAASR,EAAe,WACxB,IAAMD,EAAgB4B,EAAEC,SAClBD,EAAEC,SAASpC,KAAKO,MACf4B,EAAErC,QAAU,gCACnBkB,EAASN,EAAc,UAAYH,UCTnCe,EAAOe,eAIf,OAAInB,EACO,cAAC,IAAD,CAAUoB,GAAI,aAIrB,sBAAKnD,UAAWC,IAAOmD,mBAAvB,UACI,sBAAMR,SAAUT,EAAOkB,aAAvB,SACI,cAACC,EAAA,EAAD,UACI,eAACC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,aACIC,MAAM,QACNC,OAAO,UACHvB,EAAOwB,cAAc,WAGzBxB,EAAOyB,QAAQnD,OAAS0B,EAAOM,OAAOhC,MAChC,qBAAKoD,MAAO,CAAEC,MAAO,OAArB,SAA+B3B,EAAOM,OAAOhC,QAC7C,KAEV,cAAC+C,EAAA,EAAD,aACIlC,KAAK,WACLmC,MAAM,WACNC,OAAO,UACHvB,EAAOwB,cAAc,cAGzBxB,EAAOyB,QAAQ5C,UAAYmB,EAAOM,OAAOzB,SACnC,qBAAK6C,MAAO,CAAEC,MAAO,OAArB,SAA+B3B,EAAOM,OAAOzB,WAC7C,KAEV,cAAC+C,EAAA,EAAD,CACIN,MAAO,cACPO,QAAS,cAACC,EAAA,EAAD,CACLC,SAAU/B,EAAOgC,aACjBC,QAASjC,EAAOK,OAAOF,WACvB+B,KAAK,iBAGb,cAACC,EAAA,EAAD,CAAQhD,KAAM,SAAUiD,QAAS,YAAaT,MAAO,UAArD,0BAIZ,qBAAK9D,UAAWC,IAAOuE,wBAAvB,SACI,cAAC,IAAD,CAASrB,GAAIsB,GAAKC,iBAAlB,SAAqC,0B,iBCxF/CxD,EAAe,CACjByD,KAAM,GACNC,YAAY,GAqBHC,EAAe,SAACD,GACzB,MAAQ,CACJtD,KAAM,eACNsD,eCjBKE,EAAmB,WAC5B,IAAMjD,EAAWC,cACX4C,EAAmB1C,aAAgE,SAAAC,GAAK,OAAIA,EAAMyC,oBAElGvC,EAASC,YAAU,CACrBC,cAAe,CACX5B,MAAO,IAEX8B,SAAU,SAACC,GACP,IAAMC,EAA0B,GAOhC,OANKD,EAAO/B,MAEA,4CAA4CiC,KAAKF,EAAO/B,SAChEgC,EAAOhC,MAAQ,yBAFfgC,EAAOhC,MAAQ,WAKZgC,GAEXG,SAAU,SAAAJ,GDGQ,IAAC/B,ECFfoB,GDEepB,ECFK+B,EAAO/B,MDEM,SAACoB,GAC1CA,EAASR,EAAe,YACxBT,EAAmBH,GACdoC,MAAK,SAAAC,GACFjB,EAhB+C,CACvDP,KAAM,2BACNqD,KAc0C7B,EAAIjC,KAAK8D,OAC3C9C,EAASgD,GAAa,IACtBhD,EAASR,EAAe,iBAE3B0B,OAAM,SAAA3B,GACHS,EAASR,EAAe,WACxBQ,EAASN,EAAc,UAAYH,EAAM6B,SAASpC,KAAKO,QACvDS,EAASgD,GAAa,UCZtB1C,EAAOe,eAIf,OACI,8BAEQwB,EAAiBE,WACX,qBAAK5E,UAAWC,IAAO8E,iBAAvB,2DAGA,sBAAMnC,SAAUT,EAAOkB,aAAvB,SACE,cAACC,EAAA,EAAD,UACI,eAACC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,aACIC,MAAM,QACNC,OAAO,UACHvB,EAAOwB,cAAc,WAGzBxB,EAAOyB,QAAQnD,OAAS0B,EAAOM,OAAOhC,MAChC,qBAAKoD,MAAO,CAAEC,MAAO,OAArB,SAA+B3B,EAAOM,OAAOhC,QAC7C,KAEV,cAAC6D,EAAA,EAAD,CAAQhD,KAAM,SAAUiD,QAAS,YAAaT,MAAO,UAArD,0C,iBC/CnBkB,EAAU,WACnB,IAAMnD,EAAWC,cACXmD,EAAkBjD,aAA2D,SAAAC,GAAK,OAAIA,EAAMC,MAAMrB,QAClGkB,EAAiBC,aAAuC,SAAAC,GAAK,OAAIA,EAAMC,MAAMV,cAMnF,OAJA0D,qBAAU,YACLD,GAAmBpD,GJ0CE,SAACA,GAC3BA,EAASR,EAAe,YACxBT,IACKiC,MAAK,SAACC,GACHjB,EAASR,EAAe,cACxBQ,EAASJ,EAAcqB,EAAIjC,OAC3BgB,EAASH,GAAgB,OAE5BqB,OAAM,SAACC,GACJnB,EAASR,EAAe,WACxB,IAAMD,EAAgB4B,EAAEC,SAClBD,EAAEC,SAASpC,KAAKO,MACf4B,EAAErC,QAAU,gCACnBkB,EAASN,EAAc,UAAYH,YItDxC,IAEEW,EAKD,qBAAK/B,UAAWC,IAAOkF,QAAvB,SACKF,GAAmB,8CACJA,EAAgBZ,KADZ,IACkB,uBADlB,eAEHY,EAAgBxE,MAFb,IAEoB,uBAFpB,gBAGFwE,EAAgBG,OAHd,IAGsB,4BARvC,cAAC,IAAD,CAAUjC,GAAI,YChBvBjC,GAAiC,CACnCmE,eAAe,GCUNC,GAAiB,WAC1B,IAAMzD,EAAWC,cACXyD,EAAcvD,aAAgD,SAAAC,GAAK,OAAIA,EAAMsD,eAC3EtE,EAAuBuE,cAAvBvE,mBAEFkB,EAASC,YAAU,CACrBC,cAAe,CACXrB,SAAU,GACVyE,eAAgB,IAEpBlD,SAAU,SAACC,GACP,IAAMC,EAA0B,GAahC,OAZKD,EAAOxB,SAEDwB,EAAOxB,SAAS2B,OAAS,IAChCF,EAAOzB,SAAW,2CAFlByB,EAAOzB,SAAW,WAKjBwB,EAAOiD,eAEDjD,EAAOxB,WAAawB,EAAOiD,iBAClChD,EAAOgD,eAAiB,2BAFxBhD,EAAOgD,eAAiB,WAKrBhD,GAEXG,SAAU,SAAAJ,GACNX,EDdoB,SAACb,EAAkBC,GAAnB,OAAkD,SAACY,GAC/EjB,EAAoBI,EAAUC,GACzB4B,MAAK,SAAAC,GACFjB,EATiD,CACzDP,KAAM,mBACN+D,eAOkC,OAE7BtC,OAAM,SAAA3B,GACHS,EAASN,EAAc,UAAYH,EAAM6B,SAASpC,KAAKO,YCQ9CsE,CAAiBlD,EAAOxB,SAAUC,IAC3CkB,EAAOe,eAIf,OAAIqC,EAAYF,cACL,cAAC,IAAD,CAAUlC,GAAI,WAIrB,8BACI,sBAAMP,SAAUT,EAAOkB,aAAvB,SACI,cAACC,EAAA,EAAD,UACI,eAACC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,aACIlC,KAAK,WACLmC,MAAM,WACNC,OAAO,UACHvB,EAAOwB,cAAc,cAGzBxB,EAAOyB,QAAQ5C,UAAYmB,EAAOM,OAAOzB,SACnC,qBAAK6C,MAAO,CAAEC,MAAO,OAArB,SAA+B3B,EAAOM,OAAOzB,WAC7C,KAEV,cAACwC,EAAA,EAAD,aACIlC,KAAK,WACLmC,MAAM,kBACNC,OAAO,UACHvB,EAAOwB,cAAc,oBAGzBxB,EAAOyB,QAAQ6B,gBAAkBtD,EAAOM,OAAOgD,eACzC,qBAAK5B,MAAO,CAAEC,MAAO,OAArB,SAA+B3B,EAAOM,OAAOgD,iBAC7C,KAEV,cAACnB,EAAA,EAAD,CAAQhD,KAAM,SAAUiD,QAAS,YAAaT,MAAO,UAArD,wCC1ElB5C,GAAe,CACjByE,UAAU,GA+BDC,GAAgB,SAACjE,GAAD,MAAqB,CAAEL,KAAM,iBAAkBK,UCrB/DkE,GAAS,WAClB,IAAMhE,EAAWC,cACX6D,EAAW3D,aAAuC,SAACC,GAAD,OAAWA,EAAM6D,aAAaH,YAEhFxD,EAASC,YAAU,CACrBC,cAAe,CACX5B,MAAO,GACPO,SAAU,GACVyE,eAAgB,IAEpBlD,SAAU,SAACC,GACP,IAAMC,EAA0B,GAmBhC,OAlBKD,EAAO/B,MAEA,4CAA4CiC,KAAKF,EAAO/B,SAChEgC,EAAOhC,MAAQ,yBAFfgC,EAAOhC,MAAQ,WAKd+B,EAAOxB,SAEDwB,EAAOxB,SAAS2B,OAAS,IAChCF,EAAOzB,SAAW,2CAFlByB,EAAOzB,SAAW,WAKjBwB,EAAOiD,eAEDjD,EAAOxB,WAAawB,EAAOiD,iBAClChD,EAAOgD,eAAiB,2BAFxBhD,EAAOgD,eAAiB,WAKrBhD,GAEXG,SAAU,SAAAJ,GDzBM,IAAC/B,EAAeO,EC0B5Ba,GD1BapB,EC0BK+B,EAAO/B,MD1BGO,EC0BIwB,EAAOxB,SD1BU,SAACa,GAC1DA,EAASR,EAAe,YACxBT,EAAWH,EAAOO,GACb6B,MAAK,SAAAC,GACFjB,EAASR,EAAe,cACxBQ,EAAS+D,IAAc,OAE1B7C,OAAM,SAAA3B,GACHS,EAASR,EAAe,WACxBQ,EAASN,EAAc,UAAYH,EAAM6B,SAASpC,KAAKO,cCkBvDe,EAAOe,eAIf,OAAIyC,EACO,cAAC,IAAD,CAAUxC,GAAI,WAIrB,8BACI,sBAAMP,SAAUT,EAAOkB,aAAvB,SACI,cAACC,EAAA,EAAD,UACI,eAACC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,aACIC,MAAM,QACNC,OAAO,UACHvB,EAAOwB,cAAc,WAGzBxB,EAAOyB,QAAQnD,OAAS0B,EAAOM,OAAOhC,MAChC,qBAAKoD,MAAO,CAAEC,MAAO,OAArB,SAA+B3B,EAAOM,OAAOhC,QAC7C,KAEV,cAAC+C,EAAA,EAAD,aACIlC,KAAK,WACLmC,MAAM,WACNC,OAAO,UACHvB,EAAOwB,cAAc,cAGzBxB,EAAOyB,QAAQ5C,UAAYmB,EAAOM,OAAOzB,SACnC,qBAAK6C,MAAO,CAAEC,MAAO,OAArB,SAA+B3B,EAAOM,OAAOzB,WAC7C,KAEV,cAACwC,EAAA,EAAD,aACIlC,KAAK,WACLmC,MAAM,kBACNC,OAAO,UACHvB,EAAOwB,cAAc,oBAGzBxB,EAAOyB,QAAQ6B,gBAAkBtD,EAAOM,OAAOgD,eACzC,qBAAK5B,MAAO,CAAEC,MAAO,OAArB,SAA+B3B,EAAOM,OAAOgD,iBAC7C,KAEV,cAACnB,EAAA,EAAD,CAAQhD,KAAM,SAAUiD,QAAS,YAAaT,MAAO,UAArD,+BClFXW,GAAO,CAChBvC,MAAO,SACPwC,iBAAkB,oBAClBS,QAAS,WACTY,OAAQ,UACRR,YAAa,eACbnE,MAAO,QAIE4E,GAAS,WAClB,OACI,qBAAKhG,UAAWC,IAAOgG,eAAvB,SACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAM,IAAKC,OAAQ,kBAAM,cAAC,IAAD,CAAUjD,GAAIsB,GAAKvC,WACzD,cAAC,IAAD,CAAOiE,KAAM1B,GAAKvC,MAAOkE,OAAQ,kBAAM,cAAC,EAAD,OACvC,cAAC,IAAD,CAAOF,OAAK,EAACC,KAAM1B,GAAKsB,OAAQK,OAAQ,kBAAM,cAAC,GAAD,OAC9C,cAAC,IAAD,CAAOF,OAAK,EAACC,KAAM1B,GAAKU,QAASiB,OAAQ,kBAAM,cAAC,EAAD,OAC/C,cAAC,IAAD,CAAOF,OAAK,EAACC,KAAM1B,GAAKC,iBAAkB0B,OAAQ,kBAAM,cAAC,EAAD,OACxD,cAAC,IAAD,CAAOD,KAAI,UAAK1B,GAAKc,YAAV,wBAA6Ca,OAAQ,kBAAM,cAAC,GAAD,OACtE,cAAC,IAAD,CAAOD,KAAM1B,GAAKrD,MAAOgF,OAAQ,kBAAM,cAAC,EAAD,OACvC,cAAC,IAAD,CAAU1F,KAAM,IAAKyC,GAAIsB,GAAKrD,cCpBxCiF,GAAYC,aAAW,SAACC,GAAD,MAAmB,CAC5CC,KAAM,CACFC,SAAU,EACVC,gBAAiBH,EAAMI,QAAQC,WAAWC,WA2CnCC,OAvCf,WACI,IAAMjF,EAAWC,cACXC,EAAiBC,aAAuC,SAAAC,GAAK,OAAIA,EAAMC,MAAMV,cAFrE,EAIwBuF,mBAAS,IAJjC,mBAIPC,EAJO,KAIMC,EAJN,KAMRC,EAAUb,KAEVlC,EAAe,SAACgD,EAA8BC,GAChDH,EAAeG,IAOnB,OAAIrF,EACO,qBAAK/B,UAAWkH,EAAQV,KAAxB,SACH,cAACa,EAAA,EAAD,CAAQC,SAAS,SAAjB,SACI,eAACC,EAAA,EAAD,CAAM5F,MAAOqF,EAAa9C,SAAUC,EAAcqD,aAAW,cAA7D,UACI,cAACC,EAAA,EAAD,CAAKhE,MAAM,UAAU9B,MAAM,WAAW+F,UAAWC,IAAMxE,GAAIsB,GAAKU,UAChE,cAACsC,EAAA,EAAD,CAAKhE,MAAM,SAASmE,QATP,WACzB/F,GV0CsB,SAACA,GAC3BA,EAASR,EAAe,YACxBT,IACKiC,MAAK,SAACC,GACHjB,EAASR,EAAe,cACxBQ,EAASH,GAAgB,IACzBG,EAASJ,EAAc,UAE1BsB,OAAM,SAACC,GACJnB,EAASR,EAAe,WACxB,IAAMD,EAAgB4B,EAAEC,SAClBD,EAAEC,SAASpC,KAAKO,MACf4B,EAAErC,QAAU,gCACnBkB,EAASN,EAAc,UAAYH,oBUxCvC,qBAAKpB,UAAWkH,EAAQV,KAAxB,SACI,cAACa,EAAA,EAAD,CAAQC,SAAS,SAAjB,SACI,eAACC,EAAA,EAAD,CAAM5F,MAAOqF,EAAa9C,SAAUC,EAAcqD,aAAW,sBAA7D,UACI,cAACC,EAAA,EAAD,CAAKhE,MAAM,QAAQ9B,MAAM,SAAS+F,UAAWC,IAAMxE,GAAIsB,GAAKvC,QAC5D,cAACuF,EAAA,EAAD,CAAKhE,MAAM,UAAU9B,MAAM,UAAU+F,UAAWC,IAAMxE,GAAIsB,GAAKsB,iB,oBC5CnF,SAAS8B,GAAMC,GACX,OAAO,cAAC,KAAD,aAAUC,UAAW,EAAGxD,QAAQ,UAAauD,IAGjD,SAASE,KACZ,IAAMnG,EAAWC,cACXV,EAAQY,aAA6C,SAAAC,GAAK,OAAIA,EAAMgG,IAAI7G,SACxE8G,EAAmB,OAAV9G,EASf,OACI,cAAC+G,GAAA,EAAD,CAAUC,KAAMF,EAAQG,iBAAkB,IAAMC,QARhC,SAACnB,EAA8BoB,GAChC,cAAXA,GAGJ1G,EAASN,EAAc,QAIvB,SACI,cAAC,GAAD,CAAOiH,SAAS,QAAhB,SACKpH,MC3BF,WAA0B,sC,oBCG5BqH,GAAY,WACrB,OACI,qBAAKzI,UAAW6D,KAAM6E,OAAtB,SACI,qBAAKC,IAAKC,GAAWC,IAAI,iBCMxBC,GAAM,WAGjB,MAAe,YAFA9G,aAAiD,SAAAC,GAAK,OAAIA,EAAMgG,IAAI9G,UAG1E,cAAC,GAAD,IAIP,sBAAKnB,UAAU,MAAf,UACE,cAAC,GAAD,IACA,cAACgI,GAAD,IACA,cAAC,GAAD,Q,2BCvBA9G,GAAe,GCWf6H,GAAWC,aAAgB,CAC7B9G,MhBSwB,WAA4E,IAA3ED,EAA0E,uDAApDf,EAAc+H,EAAsC,uCACnG,OAAQA,EAAO3H,MACX,IAAK,sBACD,OAAO,2BAAKW,GAAZ,IAAmBpB,KAAMoI,EAAOpI,OAEpC,IAAK,yBACD,OAAO,2BAAKoB,GAAZ,IAAmBT,WAAYyH,EAAOtH,QAE1C,QACI,OAAOM,IgBjBf6D,aTFyB,WAAoF,IAAnF7D,EAAkF,uDAAxDf,GAAc+H,EAA0C,uCAC5G,OAAQA,EAAO3H,MACX,IAAK,iBACD,OAAO,2BAAKW,GAAZ,IAAmB0D,SAAUsD,EAAOtH,QAExC,QACI,OAAOM,ISHfkD,QDX0B,WAA4E,IAA3ElD,EAA0E,uDAAhDf,GAAc+H,EAAkC,uCAG7F,OAFAA,EAAO3H,KAEAW,GCSfyC,iBdLmC,WAAoH,IAAnHzC,EAAkH,uDAAxEf,EAAc+H,EAA0D,uCACtJ,OAAQA,EAAO3H,MACX,IAAK,2BACD,OAAO,2BAAKW,GAAZ,IAAmB0C,KAAMsE,EAAOtE,OACpC,IAAK,eACD,OAAO,2BAAK1C,GAAZ,IAAmB2C,WAAYqE,EAAOrE,aAC1C,QACI,OAAO3C,IcDfsD,YXJiC,WAAoF,IAAnFtD,EAAkF,uDAAxDf,GAAc+H,EAA0C,uCACpH,OAAQA,EAAO3H,MACX,IAAK,mBACD,OAAO,2BAAKW,GAAZ,IAAmBoD,cAAe4D,EAAO5D,gBAC7C,QACI,OAAOpD,IWAfgG,IjBNsB,WAAoF,IAAnFhG,EAAkF,uDAAxDf,EAAc+H,EAA0C,uCACzG,OAAQA,EAAO3H,MACX,IAAK,iBACD,OAAO,2BACAW,GADP,IAEId,OAAQ8H,EAAO9H,SAGvB,IAAK,gBACD,OAAO,2BACAc,GADP,IAEIb,MAAO6H,EAAO7H,QAGtB,QACI,OAAOa,MiBNNiH,GAAQC,aAAYJ,GAAUK,aAAgBC,OAK3DC,OAAOJ,MAAQA,GACfK,QAAQC,IAAIN,GAAMO,YCxBlB,IAYeC,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqB/G,MAAK,YAAkD,IAA/CgH,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCCdO,IAAS9D,OACL,cAAC,IAAD,UACI,cAAC,IAAD,CAAU8C,MAAOA,GAAjB,SACI,cAAC,GAAD,QAGRiB,SAASC,eAAe,SAM5BV,M,mBCrBAW,EAAOC,QAAU,CAAC,mBAAqB,kCAAkC,wBAA0B,yC,mBCAnGD,EAAOC,QAAU,CAAC,eAAiB,iC,mBCAnCD,EAAOC,QAAU,CAAC,SAAW,6B,mBCA7BD,EAAOC,QAAU,CAAC,iBAAmB,6C,mBCArCD,EAAOC,QAAU,CAAC,QAAU,2B,mBCA5BD,EAAOC,QAAU,CAAC,OAAS,6B","file":"static/js/main.43fc2c1e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport styles from \"./Error404.module.css\"\r\n\r\nexport const Error404 = () => {\r\n    return (\r\n        <div className={styles.error404}>\r\n            <div>404</div>\r\n            <div>Page not found!</div>\r\n            <div>— ฅ/ᐠ. ̫  .ᐟ\\ฅ—</div>\r\n        </div>\r\n    );\r\n}\r\n","import axios from \"axios\";\r\nimport { LoginFormData } from \"../reducers/login-reducer\";\r\n\r\n\r\nconst instance = axios.create({\r\n    baseURL: `https://neko-back.herokuapp.com/2.0`,\r\n    // baseURL: `http://localhost:7542/2.0/`,\r\n    withCredentials: true\r\n})\r\n\r\nconst RequestForgetPasswordObject: RequestForgetPasswordType = {\r\n    email: '',\r\n    from: `test-front-admin <ai73a@yandex.by>`,\r\n    message: `<div style=\"background-color: lime; padding: 15px\">password recovery link: \r\n              <a href='http://localhost:3000/friday-cards-project#/newPassword/$token$'>link</a></div>`\r\n}\r\n\r\n//api\r\nexport const api = {\r\n    login(data: LoginFormData) {\r\n        return instance.post<ResponseUserDataType>('/auth/login', data)\r\n    },\r\n    logout() {\r\n        return instance.delete('/auth/me', {})\r\n    },\r\n    authMe(){\r\n        return instance.post('/auth/me', {})\r\n    },\r\n    signUp(email: string, password: string) {\r\n        return instance.post<ResponseSignUpType>(`auth/register`, { email, password })\r\n    },\r\n    forgotPassword(email: string) {\r\n        return instance.post<ResponseForgetPasswordType>(`auth/forgot`, {...RequestForgetPasswordObject, email})\r\n    },\r\n    recoverPassword(password: string, resetPasswordToken: string) {\r\n        return instance.post<SetPasswordResponseType>(`auth/set-new-password`, {\r\n            password,\r\n            resetPasswordToken\r\n        })\r\n    }\r\n}\r\n\r\n//types\r\nexport type ResponseUserDataType = {\r\n    _id: string\r\n    email: string\r\n    name: string\r\n    avatar?: string\r\n    publicCardPacksCount: number // packs counter\r\n    created: string\r\n    updated: string\r\n    isAdmin: boolean\r\n    verified: boolean // email confirmation\r\n    rememberMe: boolean\r\n    error?: string\r\n}\r\n\r\n\r\ntype ResponseSignUpType = {\r\n    addedUser: any\r\n    error?: string | null\r\n}\r\n\r\ntype RequestForgetPasswordType = {\r\n    email: string\r\n    from: string\r\n    message: string\r\n}\r\n\r\ntype ResponseForgetPasswordType = {\r\n    info: string\r\n    error: string\r\n}\r\n\r\ntype SetPasswordResponseType = {\r\n    info: string\r\n    error: string\r\n}","\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type ResponseErrorType = string | null\r\n\r\nconst initialState = {\r\n    status: 'idle' as RequestStatusType,\r\n    error: null as ResponseErrorType\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS': {\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        }\r\n        case 'APP/SET-ERROR': {\r\n            return {\r\n                ...state,\r\n                error: action.error\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\r\nexport const setAppErrorAC = (error: ResponseErrorType) => ({type: 'APP/SET-ERROR', error} as const)\r\n\r\ntype ActionsType = setAppStatusActionType | setAppErrorActionType\r\nexport type setAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\nexport type setAppErrorActionType = ReturnType<typeof setAppErrorAC>","import { Dispatch } from \"redux\";\r\n\r\nimport { api, ResponseUserDataType } from \"../api/api\";\r\nimport { setAppErrorAC, setAppStatusAC } from \"./app-reducer\";\r\n\r\nexport type LoginFormData = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\ntype UserAuthData = {\r\n    data: ResponseUserDataType | null\r\n    isLoggedIn: boolean\r\n}\r\n\r\nconst initialState: UserAuthData = {\r\n    data: null,\r\n    isLoggedIn: false,\r\n}\r\n\r\nexport const loginReducer = (state: UserAuthData = initialState, action: ActionsType): UserAuthData => {\r\n    switch (action.type) {\r\n        case 'login/SET-USER-DATA': {\r\n            return { ...state, data: action.data }\r\n        }\r\n        case 'login/SET-IS-LOGGED-IN': {\r\n            return { ...state, isLoggedIn: action.value }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setUserDataAC = (data: ResponseUserDataType | null) =>\r\n    ({ type: 'login/SET-USER-DATA', data } as const)\r\n\r\nexport const setIsLoggedInAC = (value: boolean) =>\r\n    ({ type: 'login/SET-IS-LOGGED-IN', value } as const)\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginFormData) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    api.login(data)\r\n        .then((res) => {\r\n            dispatch(setAppStatusAC('succeeded'))\r\n            dispatch(setIsLoggedInAC(true))\r\n            dispatch(setUserDataAC(res.data))\r\n        })\r\n        .catch((e) => {\r\n            dispatch(setAppStatusAC('failed'))\r\n            const error: string = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setAppErrorAC('Error: ' + error))\r\n        })\r\n}\r\n\r\nexport const authMeTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    api.authMe()\r\n        .then((res) => {\r\n            dispatch(setAppStatusAC('succeeded'))\r\n            dispatch(setUserDataAC(res.data))\r\n            dispatch(setIsLoggedInAC(true))\r\n        })\r\n        .catch((e) => {\r\n            dispatch(setAppStatusAC('failed'))\r\n            const error: string = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setAppErrorAC('Error: ' + error))\r\n        })\r\n}\r\n\r\nexport const logoutTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    api.logout()\r\n        .then((res) => {\r\n            dispatch(setAppStatusAC('succeeded'))\r\n            dispatch(setIsLoggedInAC(false))\r\n            dispatch(setUserDataAC(null))\r\n        })\r\n        .catch((e) => {\r\n            dispatch(setAppStatusAC('failed'))\r\n            const error: string = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setAppErrorAC('Error: ' + error))\r\n        })\r\n}\r\n\r\n// types\r\ntype ActionsType = ReturnType<typeof setIsLoggedInAC>\r\n    | ReturnType<typeof setUserDataAC>\r\n    | ReturnType<typeof setAppErrorAC>\r\n","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { NavLink, Redirect } from \"react-router-dom\";\r\nimport { useFormik } from \"formik\";\r\nimport { Checkbox, FormControl, FormControlLabel, FormGroup, TextField, Button } from '@material-ui/core'\r\n\r\nimport styles from './Login.module.css'\r\nimport { AppRootStateType } from \"../../../reducers/store\";\r\nimport { loginTC } from \"../../../reducers/login-reducer\";\r\nimport { PATH } from \"../../Routes/Routes\";\r\n\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n    const dispatch = useDispatch()\r\n    const isUserLoggedIn = useSelector<AppRootStateType, boolean>(state => state.login.isLoggedIn)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 8) {\r\n                errors.password = 'Invalid password';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n    if (isUserLoggedIn) {\r\n        return <Redirect to={'/profile'} />\r\n    }\r\n\r\n    return (\r\n        <div className={styles.loginFormContainer}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {\r\n                            formik.touched.email && formik.errors.email\r\n                                ? <div style={{ color: 'red' }}>{formik.errors.email}</div>\r\n                                : null\r\n                        }\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        {\r\n                            formik.touched.password && formik.errors.password\r\n                                ? <div style={{ color: 'red' }}>{formik.errors.password}</div>\r\n                                : null\r\n                        }\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                onChange={formik.handleChange}\r\n                                checked={formik.values.rememberMe}\r\n                                name='rememberMe'\r\n                            />}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n            <div className={styles.forgetPasswordContainer}>\r\n                <NavLink to={PATH.passwordRecovery}>{'Forget password'}</NavLink>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n","import { Dispatch } from \"redux\";\r\nimport { api } from \"../api/api\";\r\nimport { setAppErrorAC, setAppStatusAC } from \"./app-reducer\";\r\n\r\nconst initialState = {\r\n    info: \"\",\r\n    isMailSent: false,\r\n}\r\nexport type InitialStatePasswordRecoveryType = typeof initialState\r\n\r\nexport const passwordRecoveryReducer = (state: InitialStatePasswordRecoveryType = initialState, action: ActionsType): InitialStatePasswordRecoveryType => {\r\n    switch (action.type) {\r\n        case 'FORGOT-PASSWORD-RESPONSE':\r\n            return { ...state, info: action.info }\r\n        case 'IS-MAIL-SENT':\r\n            return { ...state, isMailSent: action.isMailSent }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const ResponseForgotPasswordAC = (info: string) => ({\r\n    type: 'FORGOT-PASSWORD-RESPONSE',\r\n    info\r\n}) as const\r\n\r\nexport const isMailSentAC = (isMailSent: boolean) => {\r\n    return ({\r\n        type: 'IS-MAIL-SENT',\r\n        isMailSent\r\n    }) as const\r\n}\r\n\r\nexport const sentMailTC = (email: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    api.forgotPassword(email)\r\n        .then(res => {\r\n            dispatch(ResponseForgotPasswordAC(res.data.info))\r\n            dispatch(isMailSentAC(true))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch(error => {\r\n            dispatch(setAppStatusAC('failed'))\r\n            dispatch(setAppErrorAC('Error: ' + error.response.data.error))\r\n            dispatch(isMailSentAC(false))\r\n        })\r\n\r\n}\r\n\r\n//types\r\ntype ActionsType =\r\n    ReturnType<typeof ResponseForgotPasswordAC>\r\n    | ReturnType<typeof isMailSentAC>","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useFormik } from \"formik\";\r\nimport { Button, FormControl, FormGroup, TextField } from \"@material-ui/core\";\r\n\r\nimport styles from './PasswordRecovery.module.css'\r\nimport { AppRootStateType } from \"../../../reducers/store\";\r\nimport { InitialStatePasswordRecoveryType, sentMailTC } from \"../../../reducers/password-recovery-reducer\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n}\r\n\r\nexport const PasswordRecovery = () => {\r\n    const dispatch = useDispatch()\r\n    const passwordRecovery = useSelector<AppRootStateType, InitialStatePasswordRecoveryType>(state => state.passwordRecovery)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: ''\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(sentMailTC(values.email))\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                passwordRecovery.isMailSent\r\n                    ? <div className={styles.sentMailResponse}>\r\n                        the recovery link has been sent on your email\r\n                    </div>\r\n                    : <form onSubmit={formik.handleSubmit}>\r\n                        <FormControl>\r\n                            <FormGroup>\r\n                                <TextField\r\n                                    label=\"Email\"\r\n                                    margin=\"normal\"\r\n                                    {...formik.getFieldProps('email')}\r\n                                />\r\n                                {\r\n                                    formik.touched.email && formik.errors.email\r\n                                        ? <div style={{ color: 'red' }}>{formik.errors.email}</div>\r\n                                        : null\r\n                                }\r\n                                <Button type={'submit'} variant={'contained'} color={'primary'}>Send recovery-link</Button>\r\n                            </FormGroup>\r\n                        </FormControl>\r\n                    </form>\r\n            }\r\n        </div>\r\n\r\n    );\r\n}","import React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nimport styles from \"./Profile.module.css\"\r\nimport { ResponseUserDataType } from \"../../../api/api\";\r\nimport { AppRootStateType } from \"../../../reducers/store\";\r\nimport { authMeTC } from \"../../../reducers/login-reducer\";\r\n\r\n\r\nexport const Profile = () => {\r\n    const dispatch = useDispatch()\r\n    const userProfileData = useSelector<AppRootStateType, ResponseUserDataType | null>(state => state.login.data)\r\n    const isUserLoggedIn = useSelector<AppRootStateType, boolean>(state => state.login.isLoggedIn)\r\n    \r\n    useEffect(() => {\r\n        !userProfileData && dispatch(authMeTC())\r\n    }, [])\r\n\r\n    if (!isUserLoggedIn) {\r\n        return <Redirect to={'/login'} />\r\n    }\r\n\r\n    return (\r\n        <div className={styles.profile}>\r\n            {userProfileData && <div>\r\n                User name: {userProfileData.name} <br />\r\n                User email: {userProfileData.email} <br />\r\n                User avatar: {userProfileData.avatar} <br />\r\n            </div>}\r\n        </div>\r\n    );\r\n}","import { Dispatch } from \"redux\";\r\nimport { api } from \"../api/api\";\r\nimport { setAppErrorAC } from \"./app-reducer\";\r\n\r\nconst initialState: InitialStateType = {\r\n    passwordIsSet: false\r\n}\r\n\r\nexport type InitialStateType = {\r\n    passwordIsSet: boolean\r\n}\r\n\r\nexport const setNewPasswordReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"SET-NEW-PASSWORD\":\r\n            return { ...state, passwordIsSet: action.passwordIsSet }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const setNewPasswordAC = (passwordIsSet: boolean) => ({\r\n    type: 'SET-NEW-PASSWORD',\r\n    passwordIsSet\r\n}) as const\r\n\r\n//thunks\r\nexport const changePasswordTC = (password: string, resetPasswordToken: string) => (dispatch: Dispatch) => {\r\n    api.recoverPassword(password, resetPasswordToken)\r\n        .then(res => {\r\n            dispatch(setNewPasswordAC(true))\r\n        })\r\n        .catch(error => {\r\n            dispatch(setAppErrorAC('Error: ' + error.response.data.error))\r\n        })\r\n}\r\n\r\n//types\r\ntype ActionsType = ReturnType<typeof setNewPasswordAC>\r\n\r\n","import React from \"react\";\r\nimport { Redirect, useParams } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useFormik } from \"formik\";\r\nimport { Button, FormControl, FormGroup, TextField } from \"@material-ui/core\";\r\n\r\nimport { changePasswordTC, InitialStateType } from \"../../../reducers/set-new-password-reducer\";\r\nimport { AppRootStateType } from \"../../../reducers/store\";\r\n\r\n\r\ntype FormikErrorType = {\r\n    password?: string\r\n    repeatPassword?: string\r\n}\r\n\r\nexport const SetNewPassword = () => {\r\n    const dispatch = useDispatch()\r\n    const newPassword = useSelector<AppRootStateType, InitialStateType>(state => state.newPassword)\r\n    const { resetPasswordToken } = useParams<{ resetPasswordToken: string }>()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            password: '',\r\n            repeatPassword: ''\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 8) {\r\n                errors.password = 'Password must be more than 7 characters';\r\n            }\r\n\r\n            if (!values.repeatPassword) {\r\n                errors.repeatPassword = 'Required';\r\n            } else if (values.password !== values.repeatPassword) {\r\n                errors.repeatPassword = 'Passwords are not equal';\r\n            }\r\n\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(changePasswordTC(values.password, resetPasswordToken))\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n    if (newPassword.passwordIsSet) {\r\n        return <Redirect to={\"/login\"} />\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        {\r\n                            formik.touched.password && formik.errors.password\r\n                                ? <div style={{ color: 'red' }}>{formik.errors.password}</div>\r\n                                : null\r\n                        }\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Repeat password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('repeatPassword')}\r\n                        />\r\n                        {\r\n                            formik.touched.repeatPassword && formik.errors.repeatPassword\r\n                                ? <div style={{ color: 'red' }}>{formik.errors.repeatPassword}</div>\r\n                                : null\r\n                        }\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Set new password</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </div>\r\n    );\r\n}","import { Dispatch } from \"redux\"\r\nimport { api } from \"../api/api\"\r\nimport { setAppErrorAC, setAppStatusAC } from \"./app-reducer\"\r\n\r\nconst initialState = {\r\n    isSignUp: false,\r\n}\r\ntype InitialStateType = {\r\n    isSignUp: boolean\r\n}\r\n\r\nexport const signUpReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SET-IS-SIGN-UP': {\r\n            return { ...state, isSignUp: action.value }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// thunks\r\nexport const signUpTC = (email: string, password: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    api.signUp(email, password)\r\n        .then(res => {\r\n            dispatch(setAppStatusAC('succeeded'))\r\n            dispatch(setIsSignUpAC(true))\r\n        })\r\n        .catch(error => {\r\n            dispatch(setAppStatusAC('failed'))\r\n            dispatch(setAppErrorAC('Error: ' + error.response.data.error))\r\n        })\r\n}\r\n\r\n// actions\r\nexport const setIsSignUpAC = (value: boolean) => ({ type: 'SET-IS-SIGN-UP', value } as const)\r\nexport const setSignUpErrorAC = (error: string | null) => ({ type: 'SET-ERROR-SIGN-UP', error } as const)\r\n\r\n// types\r\ntype ActionsType = ReturnType<typeof setIsSignUpAC> | ReturnType<typeof setSignUpErrorAC>","import { useFormik } from \"formik\";\r\nimport React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { FormControl, FormGroup, TextField, Button } from '@material-ui/core'\r\n\r\nimport { signUpTC } from \"../../../reducers/signUp-reducer\";\r\nimport { AppRootStateType } from \"../../../reducers/store\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    repeatPassword?: string\r\n}\r\n\r\nexport const SignUp = () => {\r\n    const dispatch = useDispatch()\r\n    const isSignUp = useSelector<AppRootStateType, boolean>((state) => state.registration.isSignUp)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            repeatPassword: ''\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 8) {\r\n                errors.password = 'Password must be more than 7 characters';\r\n            }\r\n\r\n            if (!values.repeatPassword) {\r\n                errors.repeatPassword = 'Required';\r\n            } else if (values.password !== values.repeatPassword) {\r\n                errors.repeatPassword = 'Passwords are not equal';\r\n            }\r\n\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(signUpTC(values.email, values.password))\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n    if (isSignUp) {\r\n        return <Redirect to={'/login'} />\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {\r\n                            formik.touched.email && formik.errors.email\r\n                                ? <div style={{ color: 'red' }}>{formik.errors.email}</div>\r\n                                : null\r\n                        }\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        {\r\n                            formik.touched.password && formik.errors.password\r\n                                ? <div style={{ color: 'red' }}>{formik.errors.password}</div>\r\n                                : null\r\n                        }\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Repeat password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('repeatPassword')}\r\n                        />\r\n                        {\r\n                            formik.touched.repeatPassword && formik.errors.repeatPassword\r\n                                ? <div style={{ color: 'red' }}>{formik.errors.repeatPassword}</div>\r\n                                : null\r\n                        }\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Sign up</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\nimport { Route, Switch, Redirect } from \"react-router-dom\";\r\n\r\nimport styles from './Routes.module.css'\r\nimport { Error404 } from \"../pages/Error404/Error404\";\r\nimport { Login } from \"../pages/Login/Login\";\r\nimport { PasswordRecovery } from \"../pages/PasswordRecovery/PasswordRecovery\";\r\nimport { Profile } from \"../pages/Profile/Profile\";\r\nimport { SetNewPassword } from \"../pages/SetNewPassword/SetNewPassword\";\r\nimport { SignUp } from \"../pages/SignUp/SignUp\";\r\n\r\n\r\nexport const PATH = {\r\n    login: '/login',\r\n    passwordRecovery: '/passwordRecovery',\r\n    profile: '/profile',\r\n    signUp: '/signUp',\r\n    newPassword: '/newPassword',\r\n    error: '/404'\r\n}\r\n\r\n\r\nexport const Routes = () => {\r\n    return (\r\n        <div className={styles.currentDisplay}>\r\n            <Switch>\r\n                <Route exact path={'/'} render={() => <Redirect to={PATH.login} />} />\r\n                <Route path={PATH.login} render={() => <Login />} />\r\n                <Route exact path={PATH.signUp} render={() => <SignUp />} />\r\n                <Route exact path={PATH.profile} render={() => <Profile />} />\r\n                <Route exact path={PATH.passwordRecovery} render={() => <PasswordRecovery />} />\r\n                <Route path={`${PATH.newPassword}/:resetPasswordToken`} render={() => <SetNewPassword />} />\r\n                <Route path={PATH.error} render={() => <Error404 />} />\r\n                <Redirect from={'*'} to={PATH.error} />\r\n            </Switch>\r\n        </div>\r\n    );\r\n}","import React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport { makeStyles, Theme } from \"@material-ui/core/styles\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport Tab from \"@material-ui/core/Tab\";\r\n\r\nimport { PATH } from \"../Routes/Routes\";\r\nimport { AppRootStateType } from \"../../reducers/store\";\r\nimport { logoutTC } from \"../../reducers/login-reducer\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        backgroundColor: theme.palette.background.paper,\r\n    },\r\n}));\r\n\r\nfunction Header() {\r\n    const dispatch = useDispatch()\r\n    const isUserLoggedIn = useSelector<AppRootStateType, boolean>(state => state.login.isLoggedIn)\r\n\r\n    const [selectedTab, setSelectedTab] = useState('');\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleChange = (event: React.ChangeEvent<{}>, newValue: string) => {\r\n        setSelectedTab(newValue);\r\n    };\r\n\r\n    const onLogoutClickHandler = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n    if (isUserLoggedIn) {\r\n        return <div className={classes.root}>\r\n            <AppBar position=\"static\">\r\n                <Tabs value={selectedTab} onChange={handleChange} aria-label=\"header tabs\">\r\n                    <Tab label='profile' value='/profile' component={Link} to={PATH.profile} />\r\n                    <Tab label='logout' onClick={onLogoutClickHandler} />\r\n                </Tabs>\r\n            </AppBar>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <AppBar position=\"static\">\r\n                <Tabs value={selectedTab} onChange={handleChange} aria-label=\"simple tabs example\">\r\n                    <Tab label='login' value='/login' component={Link} to={PATH.login} />\r\n                    <Tab label='sign up' value='/signUp' component={Link} to={PATH.signUp} />\r\n                </Tabs>\r\n            </AppBar>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Header;","import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, { AlertProps } from '@material-ui/lab/Alert'\r\n\r\nimport { AppRootStateType } from '../../reducers/store'\r\nimport { setAppErrorAC } from '../../reducers/app-reducer'\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    const dispatch = useDispatch()\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error);\r\n    const isOpen = error !== null;\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC(null));\r\n    }\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}","export default __webpack_public_path__ + \"static/media/preloader.9ca08101.gif\";","import preloader from '../../assets/images/preloader.gif'\r\nimport style from './Preloader.module.css'\r\n\r\nexport const Preloader = () => {\r\n    return (\r\n        <div className={style.loader}>\r\n            <img src={preloader} alt=\"preloader\"/>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport './App.css'\r\nimport Header from '../Header/Header';\r\nimport { Routes } from \"../Routes/Routes\";\r\nimport { ErrorSnackbar } from '../ErrorSnackbar/ErrorSnackbar';\r\nimport { AppRootStateType } from '../../reducers/store';\r\nimport { RequestStatusType } from '../../reducers/app-reducer';\r\nimport { Preloader } from '../Preloader/Preloader';\r\n\r\n\r\nexport const App = () => {\r\n  const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n\r\n  if (status === 'loading') {\r\n    return <Preloader />\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Header />\r\n      <ErrorSnackbar />\r\n      <Routes />\r\n    </div>\r\n  );\r\n}\r\n","const initialState = {}\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const profileReducer = (state: InitialStateType = initialState, action: any): InitialStateType => {\r\n    switch (action.type) {\r\n        default:\r\n            return state\r\n    }\r\n}","import { applyMiddleware, combineReducers } from \"redux\";\r\nimport { createStore } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nimport { loginReducer } from \"./login-reducer\";\r\nimport { passwordRecoveryReducer } from \"./password-recovery-reducer\";\r\nimport { profileReducer } from \"./profile-reducer\";\r\nimport { setNewPasswordReducer } from \"./set-new-password-reducer\";\r\nimport { appReducer } from \"./app-reducer\";\r\nimport { signUpReducer } from \"./signUp-reducer\";\r\n\r\nconst reducers = combineReducers({\r\n    login: loginReducer,\r\n    registration: signUpReducer,\r\n    profile: profileReducer,\r\n    passwordRecovery: passwordRecoveryReducer,\r\n    newPassword: setNewPasswordReducer,\r\n    app: appReducer\r\n});\r\n\r\nexport const store = createStore(reducers, applyMiddleware(thunk));\r\n\r\nexport type AppRootStateType = ReturnType<typeof reducers>\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\nconsole.log(store.getState())","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { HashRouter } from 'react-router-dom';\r\n\r\nimport { App } from './components/App/App';\r\nimport './index.css';\r\nimport { store } from './reducers/store';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n    <HashRouter>\r\n        <Provider store={store}>\r\n            <App />\r\n        </Provider>\r\n    </HashRouter>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginFormContainer\":\"Login_loginFormContainer__2aD1U\",\"forgetPasswordContainer\":\"Login_forgetPasswordContainer__2P8CS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"currentDisplay\":\"Routes_currentDisplay__1z_mw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error404\":\"Error404_error404__3GaOV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sentMailResponse\":\"PasswordRecovery_sentMailResponse__1B0QB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__27UMu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"Preloader_loader__2rl41\"};"],"sourceRoot":""}