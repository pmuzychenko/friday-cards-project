{"version":3,"sources":["components/Routes/Routes.module.css","components/pages/Error404/Error404.module.css","components/Preloader/Preloader.module.css","components/pages/PasswordRecovery/PasswordRecovery.module.css","components/pages/Error404/Error404.tsx","api/api.ts","reducers/app-reducer.ts","reducers/login-reducer.ts","components/Preloader/Preloader.tsx","components/pages/Login/Login.tsx","reducers/password-recovery-reducer.ts","components/pages/PasswordRecovery/PasswordRecovery.tsx","components/pages/Profile/Profile.tsx","reducers/set-new-password-reducer.ts","components/pages/SetNewPassword/SetNewPassword.tsx","reducers/signUp-reducer.ts","components/pages/SignUp/SignUp.tsx","reducers/packs-reducer.ts","components/common/Pagination/Pagination.tsx","components/Modal/Modal.tsx","components/pages/Packs/Pack/Pack.tsx","components/pages/Packs/Packs.tsx","reducers/cards-reducer.ts","components/pages/Cards/Card/Card.tsx","components/pages/Cards/Cards.tsx","components/Routes/Routes.tsx","components/Header/Header.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","components/App/App.tsx","reducers/profile-reducer.ts","reducers/store.ts","reportWebVitals.ts","index.tsx","components/pages/Packs/Pack/Pack.module.css","components/pages/Packs/Packs.module.css","components/pages/Cards/Card/Card.module.css","components/pages/Cards/Cards.module.css","components/pages/Profile/Profile.module.css","components/pages/Login/Login.module.css"],"names":["module","exports","Error404","className","styles","error404","instance","axios","create","baseURL","withCredentials","RequestForgetPasswordObject","email","from","message","api","data","post","delete","password","resetPasswordToken","apiPacks","page","pageCount","sortProperty","packName","userId","get","cardsPack","name","id","packID","put","_id","apiCards","card","cardsPack_id","question","answer","cardID","initialState","status","error","isInitialized","setAppStatusAC","type","setAppErrorAC","isLoggedIn","setUserDataAC","setIsLoggedInAC","value","Preloader","style","loader","CircularProgress","Login","dispatch","useDispatch","isUserLoggedIn","useSelector","state","login","app","formik","useFormik","initialValues","rememberMe","validate","values","errors","test","length","onSubmit","then","res","catch","e","response","resetForm","to","loginFormContainer","handleSubmit","FormControl","FormGroup","TextField","label","margin","getFieldProps","touched","color","FormControlLabel","control","Checkbox","onChange","handleChange","checked","Button","variant","forgetPasswordContainer","PATH","passwordRecovery","info","isMailSent","isMailSentAC","PasswordRecovery","sentMailResponse","Profile","userProfileData","profile","containerProfile","avatarContainer","src","avatar","alt","passwordIsSet","SetNewPassword","newPassword","useParams","repeatPassword","changePasswordTC","isSignUp","setIsSignUpAC","SignUp","registration","packs","columns","cardPacksTotalCount","getPacksTC","setCurrentPageAC","setPacksAC","cardPacks","setCardPacksTotalCountAC","addPackTC","getState","deletePackTC","updatePackTC","currentPage","useStyles","makeStyles","nav","display","justifyContent","marginBottom","ul","listStyle","padding","Pagination","props","classes","items","usePagination","count","totalCount","map","index","selected","item","children","fontWeight","undefined","fontSize","marginRight","onClick","onPageChanged","theme","createStyles","modal","alignItems","paper","backgroundColor","palette","background","border","boxShadow","shadows","spacing","flexDirection","useButtonStyles","button","TransitionsModal","buttonClasses","React","useState","open","setOpen","user_id","text","startIcon","handleClose","IconButton","disabled","Modal","aria-labelledby","aria-describedby","onClose","closeAfterTransition","BackdropComponent","Backdrop","BackdropProps","timeout","Fade","in","onClickHandler","Pack","cardsCount","grade","updated","date","Date","year","getFullYear","month","getMonth","day","getDate","hours","getHours","minutes","getMinutes","dateOfUpdate","timeOfUpdate","TableRow","tablePackRow","TableCell","tableRowCellName","tableRowCellCardsCount","align","tableRowCellGrade","tableRowCellUpdated","updatePack","deletePack","tableRowCellCardsLink","Packs","pageSize","pagesAmount","Math","ceil","startMyPacksShowValue","localStorage","myPacksShowValue","JSON","parse","startSortProperty","startFilterProperty","filterProperty","setMyPacksShowValue","setSortProperty","searchPack","setSearchPack","sortUpByName","setItem","stringify","parsedSortProperty","sortDownByName","sortUpByAmount","sortDownByAmount","sortUpByGrade","sortDownByGrade","useEffect","windowData","Object","fromEntries","URL","String","window","location","searchParams","entries","packsHeader","currentTarget","parsedFilterProperty","parsedMyPacksShowValue","showMyPacksTitle","TableContainer","component","Paper","packsTable","Table","TableHead","packsTableHead","packsTableHeadColumnRow","column","cell","TableSortLabel","active","direction","colSpan","TableBody","pack","pageNumber","history","pushState","document","title","pathname","cards","cardsTotalCount","getCardsTC","setCardsAC","setCardsTotalCountAC","Card","tableCardRow","tableRowCellQuestion","tableRowCellAnswer","updateCard","deleteCard","Cards","match","useRouteMatch","params","cardsForPack","startSortPropertyCards","sortPropertyCards","deleteCardTC","updateCardTC","cardsHeader","cardsTable","cardsTableHead","cardsTableHeadColumnRow","addCardTC","signUp","Routes","currentDisplay","exact","path","render","root","flexGrow","Header","selectedTab","setSelectedTab","event","newValue","AppBar","position","Tabs","aria-label","Tab","Link","clear","Alert","elevation","ErrorSnackbar","isOpen","Snackbar","autoHideDuration","reason","severity","App","finally","reducers","combineReducers","action","store","createStore","applyMiddleware","thunk","console","log","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","basename","process","getElementById"],"mappings":"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","file":"static/js/main.3cca84e1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"currentDisplay\":\"Routes_currentDisplay__1fABP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error404\":\"Error404_error404__tHPAD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"Preloader_loader__1MHhN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sentMailResponse\":\"PasswordRecovery_sentMailResponse__1uQrh\"};","import React from \"react\";\r\nimport styles from \"./Error404.module.css\"\r\n\r\nexport const Error404 = () => {\r\n    return (\r\n        <div className={styles.error404}>\r\n            <div>404</div>\r\n            <div>Page not found!</div>\r\n            <div>— ฅ/ᐠ. ̫  .ᐟ\\ฅ—</div>\r\n        </div>\r\n    );\r\n}\r\n","import axios from \"axios\";\r\nimport { LoginFormData } from \"../reducers/login-reducer\";\r\n\r\n\r\nconst instance = axios.create({\r\n    baseURL: `https://neko-back.herokuapp.com/2.0`,\r\n    // baseURL: `http://localhost:7542/2.0/`,\r\n    withCredentials: true\r\n})\r\n\r\nconst RequestForgetPasswordObject: RequestForgetPasswordType = {\r\n    email: '',\r\n    from: `test-front-admin <ai73a@yandex.by>`,\r\n    message: `<div style=\"background-color: lime; padding: 15px\">password recovery link: \r\n              <a href='http://localhost:3000/friday-cards-project#/newPassword/$token$'>link</a></div>`\r\n}\r\n\r\n//api\r\nexport const api = {\r\n    login(data: LoginFormData) {\r\n        return instance.post('auth/login', data)\r\n    },\r\n    logout() {\r\n        return instance.delete('auth/me', {})\r\n    },\r\n    authMe() {\r\n        return instance.post('auth/me', {})\r\n    },\r\n    signUp(email: string, password: string) {\r\n        return instance.post<ResponseSignUpType>(`auth/register`, { email, password })\r\n    },\r\n    forgotPassword(email: string) {\r\n        return instance.post<ResponseForgetPasswordType>(`auth/forgot`, { ...RequestForgetPasswordObject, email })\r\n    },\r\n    recoverPassword(password: string, resetPasswordToken: string) {\r\n        return instance.post<SetPasswordResponseType>(`auth/set-new-password`, {\r\n            password,\r\n            resetPasswordToken\r\n        })\r\n    }\r\n}\r\n\r\nexport const apiPacks = {\r\n    getPacks(page?: number, pageCount?: number, sortProperty?:string, packName?: string, userId?:string) {\r\n        if (userId) {\r\n            return instance.get(`cards/pack?page=${page}&pageCount=${pageCount}&sortPacks=${sortProperty}&packName=${packName}&user_id=${userId}`)\r\n        } else {\r\n            return instance.get(`cards/pack?page=${page}&pageCount=${pageCount}&sortPacks=${sortProperty}&packName=${packName}`)\r\n        }\r\n    },\r\n    addPack() {\r\n        return instance.post(`cards/pack`, {\r\n            cardsPack: { name: 'PROJECT-CARD'}\r\n        })\r\n    },\r\n    deletePack(id: string) {\r\n        return instance.delete(`cards/pack?id=${id}`)\r\n    },\r\n    updatePack(packID: string) {\r\n        return instance.put(`cards/pack`, {\r\n            cardsPack: { _id: packID, name: 'NEW-PACK-NAME' }\r\n        })\r\n    },\r\n}\r\n\r\nexport const apiCards = {\r\n    getCards(page: number, pageCount: number, packID: string, sortProperty?:string) {\r\n        return instance.get(`cards/card?cardsPack_id=${packID}&page=${page}&pageCount=${pageCount}&sortCards=${sortProperty}`)\r\n    },\r\n    addCard(packID: string) {\r\n        return instance.post(`cards/card`, {\r\n            card: { cardsPack_id: packID, question: 'CARD-QUESTION', answer: 'CARD-ANSWER' }\r\n        })\r\n    },\r\n    deleteCard(cardID: string) {\r\n        return instance.delete(`cards/card?id=${cardID}`)\r\n    },\r\n    updateCard(cardID: string) {\r\n        return instance.put(`cards/card`, {\r\n            card: { _id: cardID, question: 'NEW-CARD-QUESTION', answer: 'NEW-CARD-ANSWER' }\r\n        })\r\n    },\r\n}\r\n\r\n//types\r\nexport type ResponseUserDataType = {\r\n    _id: string\r\n    email: string\r\n    name: string\r\n    avatar?: string\r\n    publicCardPacksCount: number // packs counter\r\n    created: string\r\n    updated: string\r\n    isAdmin: boolean\r\n    verified: boolean // email confirmation\r\n    rememberMe: boolean\r\n    error?: string\r\n}\r\n\r\n\r\ntype ResponseSignUpType = {\r\n    addedUser: any\r\n    error?: string | null\r\n}\r\n\r\ntype RequestForgetPasswordType = {\r\n    email: string\r\n    from: string\r\n    message: string\r\n}\r\n\r\ntype ResponseForgetPasswordType = {\r\n    info: string\r\n    error: string\r\n}\r\n\r\ntype SetPasswordResponseType = {\r\n    info: string\r\n    error: string\r\n}","\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type ResponseErrorType = string | null\r\nexport type IsInitializedType = boolean\r\n\r\nconst initialState = {\r\n    status: 'idle' as RequestStatusType,\r\n    error: null as ResponseErrorType,\r\n    isInitialized: false as IsInitializedType\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS': {\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        }\r\n        case 'APP/SET-ERROR': {\r\n            return {\r\n                ...state,\r\n                error: action.error\r\n            }\r\n        }\r\n        case 'APP/SET-IS-INITIALIZED': {\r\n            return {\r\n                ...state,\r\n                isInitialized: action.isInitialized\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\r\nexport const setAppErrorAC = (error: ResponseErrorType) => ({type: 'APP/SET-ERROR', error} as const)\r\nexport const setAppInitializedAC = (isInitialized: boolean) => ({type: 'APP/SET-IS-INITIALIZED', isInitialized} as const)\r\n\r\n// types\r\nexport type setAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\nexport type setAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type setAppInitializedType = ReturnType<typeof setAppInitializedAC>\r\n\r\ntype ActionsType = setAppStatusActionType | setAppErrorActionType | setAppInitializedType","import { Dispatch } from \"redux\";\r\n\r\nimport { api, ResponseUserDataType } from \"../api/api\";\r\nimport { setAppErrorAC, setAppInitializedAC, setAppStatusAC } from \"./app-reducer\";\r\n\r\nexport type LoginFormData = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\ntype UserAuthData = {\r\n    data: ResponseUserDataType | null\r\n    isLoggedIn: boolean\r\n}\r\n\r\nconst initialState: UserAuthData = {\r\n    data: null,\r\n    isLoggedIn: false\r\n}\r\n\r\nexport const loginReducer = (state: UserAuthData = initialState, action: ActionsType): UserAuthData => {\r\n    switch (action.type) {\r\n        case 'login/SET-USER-DATA': {\r\n            return { ...state, data: action.data }\r\n        }\r\n        case 'login/SET-IS-LOGGED-IN': {\r\n            return { ...state, isLoggedIn: action.value }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setUserDataAC = (data: ResponseUserDataType | null) =>\r\n    ({ type: 'login/SET-USER-DATA', data } as const)\r\n\r\nexport const setIsLoggedInAC = (value: boolean) =>\r\n    ({ type: 'login/SET-IS-LOGGED-IN', value } as const)\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginFormData) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    api.login(data)\r\n        .then((res) => {\r\n            dispatch(setAppStatusAC('succeeded'))\r\n            dispatch(setIsLoggedInAC(true))\r\n            dispatch(setUserDataAC(res.data))\r\n        })\r\n        .catch((e) => {\r\n            dispatch(setAppStatusAC('failed'))\r\n            const error: string = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setAppErrorAC('Error: ' + error))\r\n        })\r\n}\r\n\r\nexport const authMeTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    api.authMe()\r\n        .then((res) => {\r\n            dispatch(setAppStatusAC('succeeded'))\r\n            dispatch(setUserDataAC(res.data))\r\n            dispatch(setIsLoggedInAC(true))\r\n        })\r\n        .catch((e) => {\r\n            dispatch(setAppStatusAC('failed'))\r\n            const error: string = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setAppErrorAC('Error: ' + error))\r\n        })\r\n        .finally(() => {\r\n            dispatch(setAppInitializedAC(true));\r\n        })\r\n}\r\n\r\nexport const logoutTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    api.logout()\r\n        .then((res) => {\r\n            dispatch(setAppStatusAC('succeeded'))\r\n            dispatch(setIsLoggedInAC(false))\r\n            dispatch(setUserDataAC(null))\r\n            localStorage.clear()\r\n        })\r\n        .catch((e) => {\r\n            dispatch(setAppStatusAC('failed'))\r\n            const error: string = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setAppErrorAC('Error: ' + error))\r\n        })\r\n}\r\n\r\n// types\r\ntype ActionsType = ReturnType<typeof setIsLoggedInAC> | ReturnType<typeof setUserDataAC> | ReturnType<typeof setAppErrorAC>\r\n","import style from './Preloader.module.css'\r\nimport {CircularProgress} from \"@material-ui/core\";\r\n\r\nexport const Preloader = () => {\r\n    return (\r\n        <div className={style.loader}>\r\n          <CircularProgress/>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { NavLink, Redirect } from \"react-router-dom\";\r\nimport { useFormik } from \"formik\";\r\nimport { Checkbox, FormControl, FormControlLabel, FormGroup, TextField, Button } from '@material-ui/core'\r\n\r\nimport styles from './Login.module.css'\r\nimport { AppRootStateType } from \"../../../reducers/store\";\r\nimport { loginTC } from \"../../../reducers/login-reducer\";\r\nimport { PATH } from \"../../Routes/Routes\";\r\nimport { Preloader } from \"../../Preloader/Preloader\";\r\n\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n    const dispatch = useDispatch()\r\n    const isUserLoggedIn = useSelector<AppRootStateType, boolean>(state => state.login.isLoggedIn)\r\n    const status = useSelector<AppRootStateType, string>(state => state.app.status)\r\n    \r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 8) {\r\n                errors.password = 'Invalid password';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n    if (status === 'loading') {\r\n        return <Preloader />\r\n    }\r\n\r\n    if (isUserLoggedIn) {\r\n        return <Redirect to={'/profile'} />\r\n    }\r\n\r\n    return (\r\n        <div className={styles.loginFormContainer}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {\r\n                            formik.touched.email && formik.errors.email\r\n                                ? <div style={{ color: 'red' }}>{formik.errors.email}</div>\r\n                                : null\r\n                        }\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        {\r\n                            formik.touched.password && formik.errors.password\r\n                                ? <div style={{ color: 'red' }}>{formik.errors.password}</div>\r\n                                : null\r\n                        }\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                onChange={formik.handleChange}\r\n                                checked={formik.values.rememberMe}\r\n                                name='rememberMe'\r\n                            />}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n            <div className={styles.forgetPasswordContainer}>\r\n                <NavLink to={PATH.passwordRecovery}>{'Forgot password'}</NavLink>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n","import { Dispatch } from \"redux\";\r\nimport { api } from \"../api/api\";\r\nimport { setAppErrorAC, setAppStatusAC } from \"./app-reducer\";\r\n\r\nconst initialState = {\r\n    info: \"\",\r\n    isMailSent: false,\r\n}\r\nexport type InitialStatePasswordRecoveryType = typeof initialState\r\n\r\nexport const passwordRecoveryReducer = (state: InitialStatePasswordRecoveryType = initialState, action: ActionsType): InitialStatePasswordRecoveryType => {\r\n    switch (action.type) {\r\n        case 'FORGOT-PASSWORD-RESPONSE':\r\n            return { ...state, info: action.info }\r\n        case 'IS-MAIL-SENT':\r\n            return { ...state, isMailSent: action.isMailSent }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const ResponseForgotPasswordAC = (info: string) => ({\r\n    type: 'FORGOT-PASSWORD-RESPONSE',\r\n    info\r\n}) as const\r\n\r\nexport const isMailSentAC = (isMailSent: boolean) => {\r\n    return ({\r\n        type: 'IS-MAIL-SENT',\r\n        isMailSent\r\n    }) as const\r\n}\r\n\r\nexport const sentMailTC = (email: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    api.forgotPassword(email)\r\n        .then(res => {\r\n            dispatch(ResponseForgotPasswordAC(res.data.info))\r\n            dispatch(isMailSentAC(true))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch(error => {\r\n            dispatch(setAppStatusAC('failed'))\r\n            dispatch(setAppErrorAC('Error: ' + error.response.data.error))\r\n            dispatch(isMailSentAC(false))\r\n        })\r\n\r\n}\r\n\r\n//types\r\ntype ActionsType = ReturnType<typeof ResponseForgotPasswordAC> | ReturnType<typeof isMailSentAC>","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useFormik } from \"formik\";\r\nimport { Button, FormControl, FormGroup, TextField } from \"@material-ui/core\";\r\n\r\nimport styles from './PasswordRecovery.module.css'\r\nimport { AppRootStateType } from \"../../../reducers/store\";\r\nimport { InitialStatePasswordRecoveryType, sentMailTC } from \"../../../reducers/password-recovery-reducer\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n}\r\n\r\nexport const PasswordRecovery = () => {\r\n    const dispatch = useDispatch()\r\n    const passwordRecovery = useSelector<AppRootStateType, InitialStatePasswordRecoveryType>(state => state.passwordRecovery)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: ''\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(sentMailTC(values.email))\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                passwordRecovery.isMailSent\r\n                    ? <div className={styles.sentMailResponse}>\r\n                        the recovery link has been sent on your email\r\n                    </div>\r\n                    : <form onSubmit={formik.handleSubmit}>\r\n                        <FormControl>\r\n                            <FormGroup>\r\n                                <TextField\r\n                                    label=\"Email\"\r\n                                    margin=\"normal\"\r\n                                    {...formik.getFieldProps('email')}\r\n                                />\r\n                                {\r\n                                    formik.touched.email && formik.errors.email\r\n                                        ? <div style={{ color: 'red' }}>{formik.errors.email}</div>\r\n                                        : null\r\n                                }\r\n                                <Button type={'submit'} variant={'contained'} color={'primary'}>Send recovery-link</Button>\r\n                            </FormGroup>\r\n                        </FormControl>\r\n                    </form>\r\n            }\r\n        </div>\r\n\r\n    );\r\n}","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nimport styles from \"./Profile.module.css\"\r\nimport { ResponseUserDataType } from \"../../../api/api\";\r\nimport { AppRootStateType } from \"../../../reducers/store\";\r\n\r\n\r\nexport const Profile = () => {\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.login.isLoggedIn)\r\n    const userProfileData = useSelector<AppRootStateType, ResponseUserDataType | null>(state => state.login.data)\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={'/login'} />\r\n    }\r\n\r\n    return (\r\n        <div className={styles.profile}>\r\n            {userProfileData && <div className={styles.containerProfile}>\r\n                <span>User name: {userProfileData.name}</span>\r\n                <span>User email: {userProfileData.email}</span>\r\n                <div className={styles.avatarContainer}>\r\n                    <img src={userProfileData.avatar} alt=\"avatar\"/>\r\n                </div>\r\n            </div>}\r\n        </div>\r\n    );\r\n}","import { Dispatch } from \"redux\";\r\nimport { api } from \"../api/api\";\r\nimport { setAppErrorAC } from \"./app-reducer\";\r\n\r\nconst initialState: InitialStateType = {\r\n    passwordIsSet: false\r\n}\r\n\r\nexport type InitialStateType = {\r\n    passwordIsSet: boolean\r\n}\r\n\r\nexport const setNewPasswordReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"SET-NEW-PASSWORD\":\r\n            return { ...state, passwordIsSet: action.passwordIsSet }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const setNewPasswordAC = (passwordIsSet: boolean) => ({\r\n    type: 'SET-NEW-PASSWORD',\r\n    passwordIsSet\r\n}) as const\r\n\r\n//thunks\r\nexport const changePasswordTC = (password: string, resetPasswordToken: string) => (dispatch: Dispatch) => {\r\n    api.recoverPassword(password, resetPasswordToken)\r\n        .then(res => {\r\n            dispatch(setNewPasswordAC(true))\r\n        })\r\n        .catch(error => {\r\n            dispatch(setAppErrorAC('Error: ' + error.response.data.error))\r\n        })\r\n}\r\n\r\n//types\r\ntype ActionsType = ReturnType<typeof setNewPasswordAC>\r\n\r\n","import React from \"react\";\r\nimport { Redirect, useParams } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useFormik } from \"formik\";\r\nimport { Button, FormControl, FormGroup, TextField } from \"@material-ui/core\";\r\n\r\nimport { changePasswordTC, InitialStateType } from \"../../../reducers/set-new-password-reducer\";\r\nimport { AppRootStateType } from \"../../../reducers/store\";\r\n\r\n\r\ntype FormikErrorType = {\r\n    password?: string\r\n    repeatPassword?: string\r\n}\r\n\r\nexport const SetNewPassword = () => {\r\n    const dispatch = useDispatch()\r\n    const newPassword = useSelector<AppRootStateType, InitialStateType>(state => state.newPassword)\r\n    const { resetPasswordToken } = useParams<{ resetPasswordToken: string }>()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            password: '',\r\n            repeatPassword: ''\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 8) {\r\n                errors.password = 'Password must be more than 7 characters';\r\n            }\r\n\r\n            if (!values.repeatPassword) {\r\n                errors.repeatPassword = 'Required';\r\n            } else if (values.password !== values.repeatPassword) {\r\n                errors.repeatPassword = 'Passwords are not equal';\r\n            }\r\n\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(changePasswordTC(values.password, resetPasswordToken))\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n    if (newPassword.passwordIsSet) {\r\n        return <Redirect to={\"/login\"} />\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        {\r\n                            formik.touched.password && formik.errors.password\r\n                                ? <div style={{ color: 'red' }}>{formik.errors.password}</div>\r\n                                : null\r\n                        }\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Repeat password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('repeatPassword')}\r\n                        />\r\n                        {\r\n                            formik.touched.repeatPassword && formik.errors.repeatPassword\r\n                                ? <div style={{ color: 'red' }}>{formik.errors.repeatPassword}</div>\r\n                                : null\r\n                        }\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Set new password</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </div>\r\n    );\r\n}","import { Dispatch } from \"redux\"\r\nimport { api } from \"../api/api\"\r\nimport { setAppErrorAC, setAppStatusAC } from \"./app-reducer\"\r\n\r\nconst initialState = {\r\n    isSignUp: false,\r\n}\r\ntype InitialStateType = {\r\n    isSignUp: boolean\r\n}\r\n\r\nexport const signUpReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SET-IS-SIGN-UP': {\r\n            return { ...state, isSignUp: action.value }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// thunks\r\nexport const signUpTC = (email: string, password: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    api.signUp(email, password)\r\n        .then(res => {\r\n            dispatch(setAppStatusAC('succeeded'))\r\n            dispatch(setIsSignUpAC(true))\r\n        })\r\n        .catch(error => {\r\n            dispatch(setAppStatusAC('failed'))\r\n            dispatch(setAppErrorAC('Error: ' + error.response.data.error))\r\n        })\r\n}\r\n\r\n// actions\r\nexport const setIsSignUpAC = (value: boolean) => ({ type: 'SET-IS-SIGN-UP', value } as const)\r\nexport const setSignUpErrorAC = (error: string | null) => ({ type: 'SET-ERROR-SIGN-UP', error } as const)\r\n\r\n// types\r\ntype ActionsType = ReturnType<typeof setIsSignUpAC> | ReturnType<typeof setSignUpErrorAC>","import { useFormik } from \"formik\";\r\nimport React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { FormControl, FormGroup, TextField, Button } from '@material-ui/core'\r\n\r\nimport { signUpTC } from \"../../../reducers/signUp-reducer\";\r\nimport { AppRootStateType } from \"../../../reducers/store\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    repeatPassword?: string\r\n}\r\n\r\nexport const SignUp = () => {\r\n    const dispatch = useDispatch()\r\n    const isSignUp = useSelector<AppRootStateType, boolean>((state) => state.registration.isSignUp)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            repeatPassword: ''\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 8) {\r\n                errors.password = 'Password must be more than 7 characters';\r\n            }\r\n\r\n            if (!values.repeatPassword) {\r\n                errors.repeatPassword = 'Required';\r\n            } else if (values.password !== values.repeatPassword) {\r\n                errors.repeatPassword = 'Passwords are not equal';\r\n            }\r\n\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(signUpTC(values.email, values.password))\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n    if (isSignUp) {\r\n        return <Redirect to={'/login'} />\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {\r\n                            formik.touched.email && formik.errors.email\r\n                                ? <div style={{ color: 'red' }}>{formik.errors.email}</div>\r\n                                : null\r\n                        }\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        {\r\n                            formik.touched.password && formik.errors.password\r\n                                ? <div style={{ color: 'red' }}>{formik.errors.password}</div>\r\n                                : null\r\n                        }\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Repeat password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('repeatPassword')}\r\n                        />\r\n                        {\r\n                            formik.touched.repeatPassword && formik.errors.repeatPassword\r\n                                ? <div style={{ color: 'red' }}>{formik.errors.repeatPassword}</div>\r\n                                : null\r\n                        }\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Sign up</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </div>\r\n    );\r\n}","import { Dispatch } from \"redux\"\r\nimport { ThunkAction } from \"redux-thunk\"\r\nimport { apiPacks } from \"../api/api\"\r\nimport { setAppErrorAC, setAppErrorActionType, setAppStatusAC, setAppStatusActionType } from \"./app-reducer\"\r\nimport { AppRootStateType } from \"./store\"\r\n\r\n\r\nconst initialState = {\r\n    packs: [],\r\n    columns: [\r\n        { id: 1, name: 'Name' },\r\n        { id: 2, name: 'Amount of cards' },\r\n        { id: 3, name: 'Grade' },\r\n        { id: 4, name: 'Date of updates' }\r\n    ],\r\n    page: 1,\r\n    pageCount: 6,\r\n    cardPacksTotalCount: 10\r\n}\r\n\r\nexport type PackType = {\r\n    _id: string\r\n    user_id: string\r\n    name: string\r\n    cardsCount: number\r\n    grade: number\r\n    updated: string\r\n    private?: boolean\r\n}\r\n\r\nexport type ColumnType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\ntype InitialStateType = {\r\n    packs: Array<PackType>\r\n    columns: Array<ColumnType>\r\n    page: number\r\n    pageCount: number\r\n    cardPacksTotalCount: number\r\n}\r\n\r\nexport const packsReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SET-PACKS': {\r\n            return { ...state, packs: action.packs.map(pack => ({...pack})) }\r\n        }\r\n        case 'SET-PACKS-TOTAL-COUNT': {\r\n            return { ...state, cardPacksTotalCount: action.cardPacksTotalCount }\r\n        }\r\n        case 'SET-CURRENT-PAGE': {\r\n            return { ...state, page: action.currentPage }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// thunks\r\n\r\nexport const getPacksTC = (page?: number, pageCount?: number, sortProperty?: string, packName?: string, userId?: string) =>\r\n    (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        page && dispatch(setCurrentPageAC(page))\r\n        apiPacks.getPacks(page, pageCount, sortProperty, packName, userId)\r\n            .then(res => {\r\n                dispatch(setAppStatusAC('succeeded'))\r\n                dispatch(setPacksAC(res.data.cardPacks))\r\n                dispatch(setCardPacksTotalCountAC(res.data.cardPacksTotalCount))\r\n            })\r\n            .catch(error => {\r\n                dispatch(setAppStatusAC('failed'))\r\n                dispatch(setAppErrorAC('Error: ' + error.response.data.error))\r\n            })\r\n    }\r\n\r\n\r\nexport const addPackTC = (sortProperty?: string, packName?: string, userId?: string): ThunkAction<void, AppRootStateType, unknown, ActionsType> =>\r\n    (dispatch, getState) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        const { page, pageCount } = getState().packs\r\n        apiPacks.addPack()\r\n            .then(res => {\r\n                dispatch(setAppStatusAC('succeeded'))\r\n                dispatch(getPacksTC(page, pageCount, sortProperty, packName, userId))\r\n            })\r\n            .catch(error => {\r\n                dispatch(setAppStatusAC('failed'))\r\n                dispatch(setAppErrorAC('Error: ' + error.response.data.error))\r\n            })\r\n    }\r\n\r\nexport const deletePackTC = (packID: string, sortProperty?: string, packName?: string, userId?: string): ThunkAction<void, AppRootStateType, unknown, ActionsType> =>\r\n    (dispatch, getState) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        const { page, pageCount } = getState().packs\r\n        apiPacks.deletePack(packID)\r\n            .then(res => {\r\n                dispatch(setAppStatusAC('succeeded'))\r\n                dispatch(getPacksTC(page, pageCount, sortProperty, packName, userId))\r\n            })\r\n            .catch(error => {\r\n                dispatch(setAppStatusAC('failed'))\r\n                dispatch(setAppErrorAC('Error: ' + error.response.data.error))\r\n            })\r\n    }\r\n\r\nexport const updatePackTC = (packID: string, sortProperty?: string, packName?: string, userId?: string): ThunkAction<void, AppRootStateType, unknown, ActionsType> =>\r\n    (dispatch, getState) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        const { page, pageCount } = getState().packs\r\n        apiPacks.updatePack(packID)\r\n            .then(res => {\r\n                dispatch(setAppStatusAC('succeeded'))\r\n                dispatch(getPacksTC(page, pageCount, sortProperty, packName, userId))\r\n            })\r\n            .catch(error => {\r\n                dispatch(setAppStatusAC('failed'))\r\n                dispatch(setAppErrorAC('Error: ' + error.response.data.error))\r\n            })\r\n    }\r\n\r\n// actions\r\nexport const setPacksAC = (packs: Array<PackType>) => ({ type: 'SET-PACKS', packs } as const)\r\nexport const setCurrentPageAC = (currentPage: number) => ({ type: 'SET-CURRENT-PAGE', currentPage } as const)\r\nexport const setCardPacksTotalCountAC = (cardPacksTotalCount: number) => ({ type: 'SET-PACKS-TOTAL-COUNT', cardPacksTotalCount } as const)\r\n\r\n// types\r\ntype ActionsType = ReturnType<typeof setPacksAC>\r\n    | ReturnType<typeof setCurrentPageAC>\r\n    | ReturnType<typeof setCardPacksTotalCountAC>\r\n    | setAppStatusActionType\r\n    | setAppErrorActionType","import React from 'react';\r\nimport { usePagination } from '@material-ui/lab/Pagination';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\ntype PaginationPropsType = {\r\n    totalCount: number\r\n    onPageChanged: (pageNumber: number) => void\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n    nav: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        marginBottom: '13px',\r\n    },\r\n    ul: {\r\n        listStyle: 'none',\r\n        padding: 0,\r\n        margin: 0,\r\n        display: 'flex',\r\n        color: 'black'\r\n    },\r\n});\r\n\r\nexport default function Pagination(props: PaginationPropsType) {\r\n    const classes = useStyles();\r\n    const { items } = usePagination({\r\n        count: props.totalCount,\r\n    });\r\n\r\n    return (\r\n        <nav className={classes.nav}>\r\n            <ul className={classes.ul}>\r\n                {items.map(({ page, type, selected, ...item }, index) => {\r\n                    let children = null;\r\n\r\n                    if (type === 'start-ellipsis' || type === 'end-ellipsis') {\r\n                        children = '…';\r\n                    } else if (type === 'page') {\r\n                        children = (\r\n                            <button type=\"button\" style={{ fontWeight: selected ? 'bold' : undefined, fontSize: '20px', marginRight: '7px' }} {...item} >\r\n                                {page}\r\n                            </button>\r\n                        );\r\n                    } else {\r\n                        children = (\r\n                            <button type=\"button\" style={{ fontSize: '20px', marginRight: '7px' }} {...item} >\r\n                                {type}\r\n                            </button>\r\n                        );\r\n                    }\r\n\r\n                    return <li key={index} onClick={(e) => { props.onPageChanged(page) }}>{children}</li>;\r\n                })}\r\n            </ul>\r\n        </nav>\r\n    );\r\n}","import React from 'react';\r\nimport {makeStyles, Theme, createStyles} from '@material-ui/core/styles';\r\nimport Modal from '@material-ui/core/Modal';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../reducers/store\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        modal: {\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'space-between',\r\n        },\r\n        paper: {\r\n            backgroundColor: theme.palette.background.paper,\r\n            border: '2px solid #000',\r\n            boxShadow: theme.shadows[5],\r\n            padding: theme.spacing(2, 4, 3),\r\n            display: 'flex',\r\n            flexDirection: \"column\",\r\n            alignItems: 'center',\r\n        },\r\n    }),\r\n);\r\n\r\nconst useButtonStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        button: {\r\n            margin: theme.spacing(1),\r\n        },\r\n    }),\r\n);\r\n\r\ntype ModalPropsType = {\r\n    onClickHandler: (cardID: string) => void\r\n    cardID?: string\r\n    user_id: string\r\n    text: string\r\n    startIcon: any\r\n    color: \"inherit\" | \"disabled\" | \"primary\" | \"secondary\" | \"action\" | \"error\"\r\n}\r\n\r\nexport default function TransitionsModal(props: ModalPropsType) {\r\n    const classes = useStyles();\r\n    const buttonClasses = useButtonStyles();\r\n    const [open, setOpen] = React.useState(false);\r\n    const userId = useSelector<AppRootStateType, string | undefined>(state => state.login.data?._id)\r\n\r\n    const {cardID, user_id, text, startIcon, color} = props\r\n\r\n    const handleOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n    const ClickHandler = () => {\r\n        if (cardID) {\r\n            props.onClickHandler(cardID)\r\n        }\r\n        handleClose()\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <IconButton onClick={handleOpen} disabled={userId !== user_id}>\r\n                {startIcon}\r\n            </IconButton>\r\n\r\n            <Modal\r\n                aria-labelledby=\"transition-modal-title\"\r\n                aria-describedby=\"transition-modal-description\"\r\n                className={classes.modal}\r\n                open={open}\r\n                onClose={handleClose}\r\n                closeAfterTransition\r\n                BackdropComponent={Backdrop}\r\n                BackdropProps={{\r\n                    timeout: 500,\r\n                }}\r\n            >\r\n                <Fade in={open}>\r\n                    <div className={classes.paper}>\r\n                        <h2 id=\"transition-modal-title\">{text}</h2>\r\n                        <div>\r\n                            <Button onClick={ClickHandler} disabled={userId !== user_id}\r\n                                    startIcon={startIcon}\r\n                                    variant=\"contained\" className={buttonClasses.button}> yes </Button>\r\n\r\n                            <Button onClick={handleClose} disabled={userId !== user_id}\r\n                                    startIcon={<HighlightOffIcon color={color}/>}\r\n                                    variant=\"contained\"/>\r\n                        </div>\r\n                    </div>\r\n                </Fade>\r\n            </Modal>\r\n        </div>\r\n    );\r\n}","import * as React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport {useSelector} from \"react-redux\";\r\n\r\nimport {AppRootStateType} from \"../../../../reducers/store\";\r\n\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport {Delete, Edit} from '@material-ui/icons';\r\n\r\nimport styles from './Pack.module.css'\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport TransitionsModal from \"../../../Modal/Modal\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\n\r\ntype PackPropsType = {\r\n    id: string\r\n    user_id: string\r\n    name: string\r\n    cardsCount: number\r\n    grade: number\r\n    updated: string\r\n    deletePack: (packID: string) => void\r\n    updatePack: (packID: string) => void\r\n}\r\n\r\n\r\nexport function Pack(props: PackPropsType) {\r\n\r\n    const userId = useSelector<AppRootStateType, string | undefined>(state => state.login.data?._id)\r\n\r\n    const {id, name, cardsCount, grade, updated, user_id} = props\r\n\r\n    const date = new Date(updated)\r\n    const year = date.getFullYear()\r\n    const month = date.getMonth() + 1 < 10 ? `0${date.getMonth() + 1}` : date.getMonth() + 1\r\n    const day = date.getDate() < 10 ? `0${date.getDate()}` : date.getDate()\r\n    const hours = date.getHours() < 10 ? `0${date.getHours()}` : date.getHours()\r\n    const minutes = date.getMinutes() < 10 ? `0${date.getMinutes()}` : date.getMinutes()\r\n    const dateOfUpdate = `${day}-${month}-${year}`\r\n    const timeOfUpdate = `${hours}:${minutes}`\r\n\r\n    const deletePack = () => {\r\n        props.deletePack(id)\r\n    }\r\n\r\n    const updatePack = () => {\r\n        props.updatePack(id)\r\n    }\r\n\r\n    return (\r\n        <TableRow className={styles.tablePackRow}>\r\n            <TableCell className={styles.tableRowCellName}>{name}</TableCell>\r\n            <TableCell className={styles.tableRowCellCardsCount} align='center'>{cardsCount}</TableCell>\r\n            <TableCell className={styles.tableRowCellGrade} align='center'>{grade}</TableCell>\r\n            <TableCell className={styles.tableRowCellUpdated} align='center'>\r\n                {dateOfUpdate}<br/>\r\n                {timeOfUpdate}\r\n            </TableCell>\r\n            <TableCell>\r\n                <TransitionsModal onClickHandler={updatePack} user_id={user_id}\r\n                                  text={'Update pack?'}\r\n                                  startIcon={<EditIcon color={userId !== user_id ? \"disabled\" : \"primary\"}/>}\r\n                                  color={userId !== user_id ? \"disabled\" : \"primary\"}/>\r\n            </TableCell>\r\n            <TableCell>\r\n                <TransitionsModal onClickHandler={deletePack} user_id={user_id}\r\n                                  text={'Are you sure you want to delete this pack?'}\r\n                                  color={userId !== user_id ? \"disabled\" : \"primary\"}\r\n                                  startIcon={<DeleteIcon color={userId !== user_id ? \"disabled\" : \"primary\"}/>}/>\r\n            </TableCell>\r\n            <TableCell className={styles.tableRowCellCardsLink}>\r\n                <NavLink to={'/cards/' + id}>Cards</NavLink>\r\n            </TableCell>\r\n        </TableRow>\r\n    )\r\n}","import * as React from 'react';\r\nimport { ChangeEvent, useEffect, useState } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { AppRootStateType } from '../../../reducers/store';\r\nimport {\r\n    addPackTC,\r\n    ColumnType,\r\n    deletePackTC,\r\n    getPacksTC,\r\n    PackType,\r\n    updatePackTC\r\n} from '../../../reducers/packs-reducer';\r\nimport Pagination from '../../common/Pagination/Pagination';\r\nimport { Pack } from './Pack/Pack';\r\n\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport Button from '@material-ui/core/Button';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport Table from '@material-ui/core/Table';\r\nimport { TableSortLabel } from '@material-ui/core';\r\nimport styles from './Packs.module.css'\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\n\r\nexport function Packs() {\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.login.isLoggedIn)\r\n    const userId = useSelector<AppRootStateType, string | undefined>(state => state.login.data?._id)\r\n\r\n    const packs = useSelector<AppRootStateType, Array<PackType>>(state => state.packs.packs)\r\n    const columns = useSelector<AppRootStateType, Array<ColumnType>>(state => state.packs.columns)\r\n    const cardPacksTotalCount = useSelector<AppRootStateType, number>(state => state.packs.cardPacksTotalCount)\r\n    const pageSize = useSelector<AppRootStateType, number>(state => state.packs.pageCount)\r\n    let currentPage = useSelector<AppRootStateType, number>(state => state.packs.page)\r\n    const pagesAmount = Math.ceil(cardPacksTotalCount / pageSize)\r\n\r\n    let startMyPacksShowValue = localStorage.myPacksShowValue ? JSON.parse(localStorage.myPacksShowValue) : false\r\n    let startSortProperty = localStorage.sortProperty ? JSON.parse(localStorage.sortProperty) : ''\r\n    let startFilterProperty = localStorage.filterProperty ? JSON.parse(localStorage.filterProperty) : ''\r\n    const [myPacksShowValue, setMyPacksShowValue] = useState<boolean>(startMyPacksShowValue)\r\n    const [sortProperty, setSortProperty] = useState<string>(startSortProperty)\r\n    const [searchPack, setSearchPack] = useState<string>(startFilterProperty)\r\n\r\n    const addPack = () => {\r\n        if (myPacksShowValue) {\r\n            userId && dispatch(addPackTC(sortProperty, searchPack, userId))\r\n        } else {\r\n            dispatch(addPackTC(sortProperty, searchPack))\r\n        }\r\n    }\r\n\r\n    const showMyPacks = (e: ChangeEvent<HTMLInputElement>) => {\r\n        localStorage.setItem('myPacksShowValue', JSON.stringify(e.currentTarget.checked))\r\n        let parsedMyPacksShowValue = JSON.parse(localStorage.myPacksShowValue)\r\n        setMyPacksShowValue(parsedMyPacksShowValue)\r\n        if (parsedMyPacksShowValue) {\r\n            userId && dispatch(getPacksTC(currentPage, pageSize, sortProperty, searchPack, userId))\r\n        } else {\r\n            dispatch(getPacksTC(currentPage, pageSize, searchPack, sortProperty))\r\n        }\r\n    }\r\n\r\n    const deletePack = (packID: string) => {\r\n        if (myPacksShowValue) {\r\n            userId && dispatch(deletePackTC(packID, sortProperty, searchPack, userId))\r\n        } else {\r\n            dispatch(deletePackTC(packID, sortProperty, searchPack))\r\n        }\r\n    }\r\n\r\n    const updatePack = (packID: string) => {\r\n        if (myPacksShowValue) {\r\n            userId && dispatch(updatePackTC(packID, sortProperty, searchPack, userId))\r\n        } else {\r\n            dispatch(updatePackTC(packID, sortProperty, searchPack))\r\n        }\r\n    }\r\n\r\n    const sortUpByName = () => {\r\n        localStorage.setItem('sortProperty', JSON.stringify('1name'))\r\n        let parsedSortProperty = JSON.parse(localStorage.sortProperty)\r\n        setSortProperty(parsedSortProperty)\r\n        if (myPacksShowValue) {\r\n            userId && dispatch(getPacksTC(currentPage, pageSize, parsedSortProperty, searchPack, userId))\r\n        } else {\r\n            dispatch(getPacksTC(currentPage, pageSize, parsedSortProperty, searchPack))\r\n        }\r\n    }\r\n\r\n    const sortDownByName = () => {\r\n        localStorage.setItem('sortProperty', JSON.stringify('0name'))\r\n        let parsedSortProperty = JSON.parse(localStorage.sortProperty)\r\n        setSortProperty(parsedSortProperty)\r\n        if (myPacksShowValue) {\r\n            userId && dispatch(getPacksTC(currentPage, pageSize, parsedSortProperty, searchPack, userId))\r\n        } else {\r\n            dispatch(getPacksTC(currentPage, pageSize, parsedSortProperty, searchPack))\r\n        }\r\n    }\r\n\r\n    const sortUpByAmount = () => {\r\n        localStorage.setItem('sortProperty', JSON.stringify('1cardsCount'))\r\n        let parsedSortProperty = JSON.parse(localStorage.sortProperty)\r\n        setSortProperty(parsedSortProperty)\r\n        if (myPacksShowValue) {\r\n            userId && dispatch(getPacksTC(currentPage, pageSize, parsedSortProperty, searchPack, userId))\r\n        } else {\r\n            dispatch(getPacksTC(currentPage, pageSize, parsedSortProperty, searchPack))\r\n        }\r\n    }\r\n\r\n    const sortDownByAmount = () => {\r\n        localStorage.setItem('sortProperty', JSON.stringify('0cardsCount'))\r\n        let parsedSortProperty = JSON.parse(localStorage.sortProperty)\r\n        setSortProperty(parsedSortProperty)\r\n        if (myPacksShowValue) {\r\n            userId && dispatch(getPacksTC(currentPage, pageSize, parsedSortProperty, searchPack, userId))\r\n        } else {\r\n            dispatch(getPacksTC(currentPage, pageSize, parsedSortProperty, searchPack))\r\n        }\r\n    }\r\n\r\n    const sortUpByGrade = () => {\r\n        localStorage.setItem('sortProperty', JSON.stringify('1grade'))\r\n        let parsedSortProperty = JSON.parse(localStorage.sortProperty)\r\n        setSortProperty(parsedSortProperty)\r\n        if (myPacksShowValue) {\r\n            userId && dispatch(getPacksTC(currentPage, pageSize, parsedSortProperty, searchPack, userId))\r\n        } else {\r\n            dispatch(getPacksTC(currentPage, pageSize, parsedSortProperty, searchPack))\r\n        }\r\n    }\r\n\r\n    const sortDownByGrade = () => {\r\n        localStorage.setItem('sortProperty', JSON.stringify('0grade'))\r\n        let parsedSortProperty = JSON.parse(localStorage.sortProperty)\r\n        setSortProperty(parsedSortProperty)\r\n        if (myPacksShowValue) {\r\n            userId && dispatch(getPacksTC(currentPage, pageSize, parsedSortProperty, searchPack, userId))\r\n        } else {\r\n            dispatch(getPacksTC(currentPage, pageSize, parsedSortProperty, searchPack))\r\n        }\r\n    }\r\n\r\n    const onPageChanged = (pageNumber: number) => {\r\n        window.history.pushState(\r\n            null,\r\n            document.title,\r\n            `${window.location.pathname}?page=${pageNumber}`\r\n        )\r\n        if (myPacksShowValue) {\r\n            userId && dispatch(getPacksTC(pageNumber, pageSize, sortProperty, searchPack, userId))\r\n        } else {\r\n            dispatch(getPacksTC(pageNumber, pageSize, sortProperty, searchPack))\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        localStorage.setItem('filterProperty', JSON.stringify(e.currentTarget.value))\r\n        let parsedFilterProperty = JSON.parse(localStorage.filterProperty)\r\n        setSearchPack(parsedFilterProperty)\r\n        if (myPacksShowValue) {\r\n            userId && dispatch(getPacksTC(currentPage, pageSize, sortProperty, parsedFilterProperty, userId))\r\n        } else {\r\n            dispatch(getPacksTC(currentPage, pageSize, sortProperty, parsedFilterProperty))\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        const windowData = Object.fromEntries(new URL(String(window.location)).searchParams.entries())\r\n        if (windowData.page) {\r\n            currentPage = +windowData.page\r\n        }\r\n        if (myPacksShowValue) {\r\n            userId && dispatch(getPacksTC(currentPage, pageSize, sortProperty, searchPack, userId))\r\n        } else {\r\n            dispatch(getPacksTC(currentPage, pageSize, sortProperty, searchPack))\r\n        }\r\n    }, [])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={'/login'} />\r\n    }\r\n\r\n    // работает, но затирает стиль текущей страницы\r\n    // if (status === 'loading') {\r\n    //     return <Preloader />\r\n    // }\r\n\r\n    return (\r\n        <div>\r\n            <h2 className={styles.packsHeader}>PACKS OF CARDS</h2>\r\n            <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\r\n                <TextField \r\n                label=\"Search packs by name\" \r\n                style={{ marginRight: '30px' }}\r\n                value={searchPack}\r\n                onChange={onChangeHandler} />\r\n            </div>\r\n            <div>\r\n                <Checkbox checked={myPacksShowValue} onChange={showMyPacks} color={'primary'} />\r\n                <span className={styles.showMyPacksTitle}>My packs</span>\r\n            </div>\r\n            <TableContainer component={Paper} className={styles.packsTable}>\r\n                <Table>\r\n                    <TableHead className={styles.packsTableHead}>\r\n                        <TableRow className={styles.packsTableHeadColumnRow}>\r\n                            {columns.map(column => {\r\n                                return (\r\n                                    <TableCell\r\n                                        key={column.id}\r\n                                        align='center'\r\n                                        className={styles.cell}\r\n                                    >{column.name}\r\n                                        {column.name === 'Name' &&\r\n                                            <div>\r\n                                                <TableSortLabel\r\n                                                    active={true}\r\n                                                    direction={'asc'}\r\n                                                    onClick={sortUpByName}\r\n                                                />\r\n                                                <TableSortLabel\r\n                                                    active={true}\r\n                                                    direction={'desc'}\r\n                                                    onClick={sortDownByName}\r\n                                                />\r\n                                            </div>}\r\n                                        {column.name === 'Amount of cards' &&\r\n                                            <div>\r\n                                                <TableSortLabel\r\n                                                    active={true}\r\n                                                    direction={'asc'}\r\n                                                    onClick={sortUpByAmount}\r\n                                                />\r\n                                                <TableSortLabel\r\n                                                    active={true}\r\n                                                    direction={'desc'}\r\n                                                    onClick={sortDownByAmount}\r\n                                                />\r\n                                            </div>}\r\n                                        {column.name === 'Grade' &&\r\n                                            <div>\r\n                                                <TableSortLabel\r\n                                                    active={true}\r\n                                                    direction={'asc'}\r\n                                                    onClick={sortUpByGrade}\r\n                                                />\r\n                                                <TableSortLabel\r\n                                                    active={true}\r\n                                                    direction={'desc'}\r\n                                                    onClick={sortDownByGrade}\r\n                                                />\r\n                                            </div>}\r\n                                    </TableCell>\r\n                                )\r\n                            })}\r\n                            <TableCell colSpan={3} align='center'>\r\n                                <Button color=\"primary\" variant={'contained'} onClick={addPack}>\r\n                                    Add pack\r\n                                </Button>\r\n                            </TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {packs.map(pack => <Pack\r\n                            key={pack._id}\r\n                            id={pack._id}\r\n                            user_id={pack.user_id}\r\n                            name={pack.name}\r\n                            cardsCount={pack.cardsCount}\r\n                            grade={pack.grade}\r\n                            updated={pack.updated}\r\n                            deletePack={deletePack}\r\n                            updatePack={updatePack}\r\n                        />\r\n                        )}\r\n                    </TableBody>\r\n                </Table>\r\n                <Pagination totalCount={pagesAmount} onPageChanged={onPageChanged} />\r\n            </TableContainer>\r\n        </div>\r\n    )\r\n}\r\n","import { Dispatch } from \"redux\"\r\nimport { ThunkAction } from \"redux-thunk\"\r\nimport { apiCards } from \"../api/api\"\r\nimport { setAppErrorAC, setAppErrorActionType, setAppStatusAC, setAppStatusActionType } from \"./app-reducer\"\r\nimport { AppRootStateType } from \"./store\"\r\n\r\n\r\nconst initialState = {\r\n    cards: {},\r\n    columns: [\r\n        { id: 1, name: 'Question' },\r\n        { id: 2, name: 'Answer' },\r\n        { id: 3, name: 'Grade' },\r\n        { id: 4, name: 'Updated' }\r\n    ],\r\n    page: 1,\r\n    pageCount: 6,\r\n    cardsTotalCount: 10\r\n}\r\n\r\nexport type CardType = {\r\n    _id: string\r\n    user_id: string\r\n    cardsPack_id: string\r\n    answer: string\r\n    question: string\r\n    grade: number\r\n    updated: string\r\n}\r\n\r\nexport type ColumnType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nexport type CardsStateType = {\r\n    [key: string]: Array<CardType>\r\n}\r\n\r\ntype InitialStateType = {\r\n    cards: CardsStateType\r\n    columns: Array<ColumnType>\r\n    page: number\r\n    pageCount: number\r\n    cardsTotalCount: number\r\n}\r\n\r\n\r\nexport const cardsReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SET-CARDS': {\r\n            return { ...state, cards: { [action.packID]: action.cards } }\r\n        }\r\n        case 'SET-CARDS-TOTAL-COUNT': {\r\n            return { ...state, cardsTotalCount: action.cardsTotalCount }\r\n        }\r\n        case 'SET-CURRENT-PAGE': {\r\n            return { ...state, page: action.currentPage }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// thunks\r\nexport const getCardsTC = (page: number, pageCount: number, packID: string, sortProperty?: string) =>\r\n    (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        dispatch(setCurrentPageAC(page))\r\n        apiCards.getCards(page, pageCount, packID, sortProperty)\r\n            .then(res => {\r\n                dispatch(setAppStatusAC('succeeded'))\r\n                dispatch(setCardsAC(res.data.cards, packID))\r\n                dispatch(setCardsTotalCountAC(res.data.cardsTotalCount))\r\n            })\r\n            .catch(error => {\r\n                dispatch(setAppStatusAC('failed'))\r\n                dispatch(setAppErrorAC('Error: ' + error.response.data.error))\r\n            })\r\n    }\r\n\r\nexport const addCardTC = (packID: string): ThunkAction<void, AppRootStateType, unknown, ActionsType> =>\r\n    (dispatch, getState) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        const { page, pageCount } = getState().cards\r\n        apiCards.addCard(packID)\r\n            .then(res => {\r\n                dispatch(setAppStatusAC('succeeded'))\r\n                dispatch(getCardsTC(page, pageCount, packID))\r\n            })\r\n            .catch(error => {\r\n                dispatch(setAppStatusAC('failed'))\r\n                dispatch(setAppErrorAC('Error: ' + error.response.data.error))\r\n            })\r\n    }\r\n\r\nexport const deleteCardTC = (cardID: string, packID: string): ThunkAction<void, AppRootStateType, unknown, ActionsType> =>\r\n    (dispatch, getState) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        const { page, pageCount } = getState().cards\r\n        apiCards.deleteCard(cardID)\r\n            .then(res => {\r\n                dispatch(setAppStatusAC('succeeded'))\r\n                dispatch(getCardsTC(page, pageCount, packID))\r\n            })\r\n            .catch(error => {\r\n                dispatch(setAppStatusAC('failed'))\r\n                dispatch(setAppErrorAC('Error: ' + error.response.data.error))\r\n            })\r\n    }\r\n\r\nexport const updateCardTC = (cardID: string, packID: string): ThunkAction<void, AppRootStateType, unknown, ActionsType> =>\r\n    (dispatch, getState) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        const { page, pageCount } = getState().packs\r\n        apiCards.updateCard(cardID)\r\n            .then(res => {\r\n                dispatch(setAppStatusAC('succeeded'))\r\n                dispatch(getCardsTC(page, pageCount, packID))\r\n            })\r\n            .catch(error => {\r\n                dispatch(setAppStatusAC('failed'))\r\n                dispatch(setAppErrorAC('Error: ' + error.response.data.error))\r\n            })\r\n    }\r\n\r\n// actions\r\nexport const setCardsAC = (cards: Array<CardType>, packID: string) => ({ type: 'SET-CARDS', cards, packID } as const)\r\nexport const setCurrentPageAC = (currentPage: number) => ({ type: 'SET-CURRENT-PAGE', currentPage } as const)\r\nexport const setCardsTotalCountAC = (cardsTotalCount: number) => ({ type: 'SET-CARDS-TOTAL-COUNT', cardsTotalCount } as const)\r\n\r\n// types\r\ntype ActionsType = ReturnType<typeof setCardsAC>\r\n    | ReturnType<typeof setCurrentPageAC>\r\n    | ReturnType<typeof setCardsTotalCountAC>\r\n    | setAppStatusActionType\r\n    | setAppErrorActionType","import * as React from 'react';\r\nimport {useSelector} from \"react-redux\";\r\n\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport {IconButton} from '@material-ui/core';\r\nimport {Delete, Edit} from '@material-ui/icons';\r\n\r\nimport {AppRootStateType} from \"../../../../reducers/store\";\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport styles from './Card.module.css'\r\nimport TransitionsModal from \"../../../Modal/Modal\";\r\nimport HighlightOffIcon from \"@material-ui/icons/HighlightOff\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\n\r\ntype CardPropsType = {\r\n    cardID: string\r\n    user_id: string\r\n    question: string\r\n    answer: string\r\n    grade: number\r\n    updated: string\r\n    deleteCard: (cardID: string) => void\r\n    updateCard: (cardID: string) => void\r\n}\r\n\r\nexport function Card(props: CardPropsType) {\r\n    const userId = useSelector<AppRootStateType, string | undefined>(state => state.login.data?._id)\r\n\r\n    const {cardID, question, answer, grade, updated, user_id} = props\r\n\r\n    const date = new Date(updated)\r\n    const year = date.getFullYear()\r\n    const month = date.getMonth() + 1 < 10 ? `0${date.getMonth() + 1}` : date.getMonth() + 1\r\n    const day = date.getDate() < 10 ? `0${date.getDate()}` : date.getDate()\r\n    const hours = date.getHours() < 10 ? `0${date.getHours()}` : date.getHours()\r\n    const minutes = date.getMinutes() < 10 ? `0${date.getMinutes()}` : date.getMinutes()\r\n    const dateOfUpdate = `${day}-${month}-${year}`\r\n    const timeOfUpdate = `${hours}:${minutes}`\r\n\r\n    const deleteCard = () => {\r\n        props.deleteCard(cardID)\r\n    }\r\n\r\n    const updateCard = () => {\r\n        props.updateCard(cardID)\r\n    }\r\n\r\n    return (\r\n        <TableRow className={styles.tableCardRow}>\r\n            <TableCell className={styles.tableRowCellQuestion}>{question}</TableCell>\r\n            <TableCell className={styles.tableRowCellAnswer}>{answer}</TableCell>\r\n            <TableCell className={styles.tableRowCellGrade} align='center'>{grade}</TableCell>\r\n            <TableCell className={styles.tableRowCellUpdated} align='center'>\r\n                {dateOfUpdate}<br/>\r\n                {timeOfUpdate}\r\n            </TableCell>\r\n            <TableCell>\r\n                <TransitionsModal cardID={cardID} onClickHandler={updateCard} user_id={user_id}\r\n                                  text={'Update card?'}\r\n                                  startIcon={<EditIcon color={userId !== user_id ? \"disabled\" : \"secondary\"}/>}\r\n                                  color={userId !== user_id ? \"disabled\" : \"secondary\"}/>\r\n            </TableCell>\r\n            <TableCell>\r\n                <TransitionsModal cardID={cardID} onClickHandler={deleteCard} user_id={user_id}\r\n                                  text={'Are you sure you want to delete this card?'}\r\n                                  startIcon={<DeleteIcon color={userId !== user_id ? \"disabled\" : \"secondary\"}/>}\r\n                                  color={userId !== user_id ? \"disabled\" : \"secondary\"}/>\r\n            </TableCell>\r\n        </TableRow>\r\n    )\r\n}","import * as React from 'react';\r\nimport { Redirect, useRouteMatch } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useEffect, useState } from 'react';\r\n\r\nimport { AppRootStateType } from '../../../reducers/store';\r\nimport { ColumnType } from '../../../reducers/packs-reducer';\r\nimport { addCardTC, CardsStateType, deleteCardTC, getCardsTC, updateCardTC } from '../../../reducers/cards-reducer';\r\nimport Pagination from '../../common/Pagination/Pagination';\r\nimport { Card } from './Card/Card';\r\n\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport Button from '@material-ui/core/Button';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport Table from '@material-ui/core/Table';\r\n\r\nimport styles from './Cards.module.css'\r\nimport { TableSortLabel } from '@material-ui/core';\r\n\r\ntype MatchParams = {\r\n    id: string;\r\n}\r\n\r\nexport function Cards() {\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.login.isLoggedIn)\r\n\r\n    const cards = useSelector<AppRootStateType, CardsStateType>(state => state.cards.cards)\r\n    const columns = useSelector<AppRootStateType, Array<ColumnType>>(state => state.cards.columns)\r\n\r\n    const cardsTotalCount = useSelector<AppRootStateType, number>(state => state.cards.cardsTotalCount)\r\n    const pageSize = useSelector<AppRootStateType, number>(state => state.cards.pageCount)\r\n    let currentPage = useSelector<AppRootStateType, number>(state => state.cards.page)\r\n    const pagesAmount = Math.ceil(cardsTotalCount / pageSize)\r\n\r\n    const match = useRouteMatch<MatchParams>('/cards/:id');\r\n    const packID = match?.params.id\r\n    const cardsForPack = packID && cards[packID]\r\n\r\n    let startSortPropertyCards = localStorage.sortPropertyCards ? JSON.parse(localStorage.sortPropertyCards) : ''\r\n    const [sortProperty, setSortProperty] = useState<string>(startSortPropertyCards)\r\n\r\n    const addCard = () => {\r\n        packID && dispatch(addCardTC(packID))\r\n    }\r\n\r\n    const deleteCard = (cardID: string) => {\r\n        packID && dispatch(deleteCardTC(cardID, packID))\r\n    }\r\n\r\n    const updateCard = (cardID: string) => {\r\n        packID && dispatch(updateCardTC(cardID, packID))\r\n    }\r\n\r\n    const onPageChanged = (pageNumber: number) => {\r\n        window.history.pushState(\r\n            null,\r\n            document.title,\r\n            `${window.location.pathname}?page=${pageNumber}`\r\n        )\r\n        packID && dispatch(getCardsTC(pageNumber, pageSize, packID))\r\n    }\r\n\r\n    const sortUpByGrade = () => {\r\n        localStorage.setItem('sortPropertyCards', JSON.stringify('1grade'))\r\n        let parsedSortProperty = JSON.parse(localStorage.sortPropertyCards)\r\n        setSortProperty(parsedSortProperty)\r\n        packID && dispatch(getCardsTC(currentPage, pageSize, packID, parsedSortProperty))\r\n    }\r\n\r\n    const sortDownByGrade = () => {\r\n        localStorage.setItem('sortPropertyCards', JSON.stringify('0grade'))\r\n        let parsedSortProperty = JSON.parse(localStorage.sortPropertyCards)\r\n        setSortProperty(parsedSortProperty)\r\n        packID && dispatch(getCardsTC(currentPage, pageSize, packID, parsedSortProperty))\r\n    }\r\n\r\n    useEffect(() => {\r\n        const windowData = Object.fromEntries(new URL(String(window.location)).searchParams.entries())\r\n        if (windowData.page) {\r\n            currentPage = +windowData.page\r\n        }\r\n        packID && dispatch(getCardsTC(currentPage, pageSize, packID, sortProperty))\r\n    }, [])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={'/login'} />\r\n    }\r\n\r\n    // работает, но затирает стиль текущей страницы\r\n    // if (status === 'loading') {\r\n    //     return <Preloader />\r\n    // }\r\n\r\n    return (\r\n        <div>\r\n            <h2 className={styles.cardsHeader}>CARDS</h2>\r\n            <TableContainer component={Paper} className={styles.cardsTable}>\r\n                <Table>\r\n                    <TableHead className={styles.cardsTableHead}>\r\n                        <TableRow className={styles.cardsTableHeadColumnRow}>\r\n                            {columns.map(column => {\r\n                                return (\r\n                                    <TableCell\r\n                                        key={column.id}\r\n                                        component='th'\r\n                                        align='center'\r\n                                        className={styles.cell}\r\n                                    >{column.name}\r\n                                        {column.name === 'Grade' &&\r\n                                            <div>\r\n                                                <TableSortLabel\r\n                                                    active={true}\r\n                                                    direction={'asc'}\r\n                                                    onClick={sortUpByGrade}\r\n                                                />\r\n                                                <TableSortLabel\r\n                                                    active={true}\r\n                                                    direction={'desc'}\r\n                                                    onClick={sortDownByGrade}\r\n                                                />\r\n                                            </div>}\r\n                                    </TableCell >\r\n                                )\r\n                            })}\r\n                            <TableCell colSpan={2} align='center'>\r\n                                <Button color=\"secondary\" variant={'contained'} onClick={addCard}>\r\n                                    Add card\r\n                            </Button>\r\n                            </TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {cardsForPack && cardsForPack.map(card => {\r\n                            return (\r\n                                <Card\r\n                                    key={card._id}\r\n                                    cardID={card._id}\r\n                                    user_id={card.user_id}\r\n                                    question={card.question}\r\n                                    answer={card.answer}\r\n                                    grade={card.grade}\r\n                                    updated={card.updated}\r\n                                    deleteCard={deleteCard}\r\n                                    updateCard={updateCard}\r\n                                />\r\n                            )\r\n                        })}\r\n                    </TableBody>\r\n                </Table>\r\n                <Pagination totalCount={pagesAmount} onPageChanged={onPageChanged} />\r\n            </TableContainer>\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport { Route, Switch, Redirect } from \"react-router-dom\";\r\n\r\nimport styles from './Routes.module.css'\r\nimport { Error404 } from \"../pages/Error404/Error404\";\r\nimport { Login } from \"../pages/Login/Login\";\r\nimport { PasswordRecovery } from \"../pages/PasswordRecovery/PasswordRecovery\";\r\nimport { Profile } from \"../pages/Profile/Profile\";\r\nimport { SetNewPassword } from \"../pages/SetNewPassword/SetNewPassword\";\r\nimport { SignUp } from \"../pages/SignUp/SignUp\";\r\nimport {Packs} from \"../pages/Packs/Packs\";\r\nimport { Cards } from \"../pages/Cards/Cards\";\r\n\r\n\r\nexport const PATH = {\r\n    login: '/login',\r\n    passwordRecovery: '/passwordRecovery',\r\n    profile: '/profile',\r\n    signUp: '/signUp',\r\n    newPassword: '/newPassword',\r\n    error: '/404',\r\n    packs: '/packs',\r\n    cards: '/cards'\r\n}\r\n\r\n\r\nexport const Routes = () => {\r\n    return (\r\n        <div className={styles.currentDisplay}>\r\n            <Switch>\r\n                <Route exact path={'/'} render={() => <Redirect to={PATH.login} />} />\r\n                <Route path={PATH.login} render={() => <Login />} />\r\n                <Route exact path={PATH.signUp} render={() => <SignUp />} />\r\n                <Route exact path={PATH.profile} render={() => <Profile />} />\r\n                <Route exact path={PATH.packs} render={() => <Packs />} />\r\n                <Route exact path={`${PATH.cards}/:id`} render={() => <Cards />} />\r\n                <Route exact path={PATH.passwordRecovery} render={() => <PasswordRecovery />} />\r\n                <Route path={`${PATH.newPassword}/:resetPasswordToken`} render={() => <SetNewPassword />} />\r\n                <Route path={PATH.error} render={() => <Error404 />} />\r\n                <Redirect from={'*'} to={PATH.error} />\r\n            </Switch>\r\n        </div>\r\n    );\r\n}","import React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport { makeStyles, Theme } from \"@material-ui/core/styles\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport Tab from \"@material-ui/core/Tab\";\r\n\r\nimport { PATH } from \"../Routes/Routes\";\r\nimport { AppRootStateType } from \"../../reducers/store\";\r\nimport { logoutTC } from \"../../reducers/login-reducer\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        backgroundColor: theme.palette.background.paper,\r\n    },\r\n}));\r\n\r\nfunction Header() {\r\n    const dispatch = useDispatch()\r\n    const isUserLoggedIn = useSelector<AppRootStateType, boolean>(state => state.login.isLoggedIn)\r\n\r\n    const [selectedTab, setSelectedTab] = useState('');\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleChange = (event: React.ChangeEvent<{}>, newValue: string) => {\r\n        setSelectedTab(newValue);\r\n    };\r\n\r\n    const onLogoutClickHandler = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n    if (isUserLoggedIn) {\r\n        return <div className={classes.root}>\r\n            <AppBar position=\"static\">\r\n                <Tabs value={selectedTab} onChange={handleChange} aria-label=\"header tabs\">\r\n                    <Tab label='profile' value='/profile' component={Link} to={PATH.profile} />\r\n                    <Tab label='packs' value='/packs' component={Link} to={PATH.packs} />\r\n                    <Tab label='logout' onClick={onLogoutClickHandler} />\r\n                </Tabs>\r\n            </AppBar>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <AppBar position=\"static\">\r\n                <Tabs value={selectedTab} onChange={handleChange} aria-label=\"simple tabs example\">\r\n                    <Tab label='login' value='/login' component={Link} to={PATH.login} />\r\n                    <Tab label='sign up' value='/signUp' component={Link} to={PATH.signUp} />\r\n                </Tabs>\r\n            </AppBar>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Header;","import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, { AlertProps } from '@material-ui/lab/Alert'\r\n\r\nimport { AppRootStateType } from '../../reducers/store'\r\nimport { setAppErrorAC } from '../../reducers/app-reducer'\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    const dispatch = useDispatch()\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error);\r\n    const isOpen = error !== null;\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC(null));\r\n    }\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport './App.css'\r\nimport Header from '../Header/Header';\r\nimport { Routes } from \"../Routes/Routes\";\r\nimport { ErrorSnackbar } from '../ErrorSnackbar/ErrorSnackbar';\r\nimport { AppRootStateType } from '../../reducers/store';\r\nimport { Preloader } from '../Preloader/Preloader';\r\nimport { authMeTC } from '../../reducers/login-reducer';\r\nimport { ResponseUserDataType } from '../../api/api';\r\n\r\n\r\nexport const App = () => {\r\n  const dispatch = useDispatch()\r\n  const userProfileData = useSelector<AppRootStateType, ResponseUserDataType | null>(state => state.login.data)\r\n  const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\r\n\r\n  useEffect(() => {\r\n    !userProfileData && dispatch(authMeTC())\r\n  }, [dispatch, userProfileData])\r\n\r\n\r\n  if (!isInitialized) {\r\n    return <Preloader />\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Header />\r\n      <ErrorSnackbar />\r\n      <Routes />\r\n    </div>\r\n  );\r\n}\r\n","const initialState = {}\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const profileReducer = (state: InitialStateType = initialState, action: any): InitialStateType => {\r\n    switch (action.type) {\r\n        default:\r\n            return state\r\n    }\r\n}","import { cardsReducer } from './cards-reducer';\r\nimport { applyMiddleware, combineReducers } from \"redux\";\r\nimport { createStore } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nimport { loginReducer } from \"./login-reducer\";\r\nimport { passwordRecoveryReducer } from \"./password-recovery-reducer\";\r\nimport { profileReducer } from \"./profile-reducer\";\r\nimport { setNewPasswordReducer } from \"./set-new-password-reducer\";\r\nimport { appReducer } from \"./app-reducer\";\r\nimport { signUpReducer } from \"./signUp-reducer\";\r\nimport { packsReducer } from \"./packs-reducer\";\r\n\r\nconst reducers = combineReducers({\r\n    login: loginReducer,\r\n    registration: signUpReducer,\r\n    profile: profileReducer,\r\n    passwordRecovery: passwordRecoveryReducer,\r\n    newPassword: setNewPasswordReducer,\r\n    app: appReducer,\r\n    packs: packsReducer,\r\n    cards: cardsReducer\r\n});\r\n\r\nexport const store = createStore(reducers, applyMiddleware(thunk));\r\n\r\nexport type AppRootStateType = ReturnType<typeof reducers>\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\nconsole.log(store.getState())","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport {BrowserRouter} from 'react-router-dom';\r\n\r\nimport { App } from './components/App/App';\r\nimport './index.css';\r\nimport { store } from './reducers/store';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n    <BrowserRouter basename={process.env.PUBLIC_URL + '/'}>\r\n        <Provider store={store}>\r\n            <App />\r\n        </Provider>\r\n    </BrowserRouter>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tablePackRow\":\"Pack_tablePackRow__1BgNj\",\"tableRowCellName\":\"Pack_tableRowCellName__USCFc\",\"tableRowCellCardsCount\":\"Pack_tableRowCellCardsCount__2DAYw\",\"tableRowCellGrade\":\"Pack_tableRowCellGrade__2VDSK\",\"tableRowCellUpdated\":\"Pack_tableRowCellUpdated__8EpvQ\",\"tableRowCellCardsLink\":\"Pack_tableRowCellCardsLink__1aBXC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"packsHeader\":\"Packs_packsHeader__1Loiu\",\"showMyPacksTitle\":\"Packs_showMyPacksTitle__2_Ton\",\"packsTable\":\"Packs_packsTable__2nTNK\",\"packsTableHead\":\"Packs_packsTableHead__JVd0U\",\"packsTableHeadColumnRow\":\"Packs_packsTableHeadColumnRow__1yVH6\",\"cell\":\"Packs_cell__2VNBM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tableCardRow\":\"Card_tableCardRow__2QVb6\",\"tableRowCellQuestion\":\"Card_tableRowCellQuestion__24FGq\",\"tableRowCellAnswer\":\"Card_tableRowCellAnswer__3osl3\",\"tableRowCellGrade\":\"Card_tableRowCellGrade__Nxg-0\",\"tableRowCellUpdated\":\"Card_tableRowCellUpdated__30DlP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cardsHeader\":\"Cards_cardsHeader__2Yqk8\",\"cardsTable\":\"Cards_cardsTable__2Gdcz\",\"cardsTableHead\":\"Cards_cardsTableHead__3oxds\",\"cardsTableHeadColumnRow\":\"Cards_cardsTableHeadColumnRow__3HiNz\",\"cell\":\"Cards_cell__PjRIU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__22PfL\",\"containerProfile\":\"Profile_containerProfile__3sfXJ\",\"avatarContainer\":\"Profile_avatarContainer__ll9T4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginFormContainer\":\"Login_loginFormContainer__2PoRB\",\"forgetPasswordContainer\":\"Login_forgetPasswordContainer__2xlKm\"};"],"sourceRoot":""}