{"version":3,"sources":["components/pages/Error404/Error404.tsx","api/api.ts","reducers/app-reducer.ts","reducers/login-reducer.ts","components/pages/Login/Login.tsx","reducers/password-recovery-reducer.ts","components/pages/PasswordRecovery/PasswordRecovery.tsx","components/pages/Profile/Profile.tsx","reducers/set-new-password-reducer.ts","components/pages/SetNewPassword/SetNewPassword.tsx","reducers/signUp-reducer.ts","components/pages/SignUp/SignUp.tsx","reducers/packs-reducer.ts","components/common/Pagination.tsx","components/pages/Packs/Packs.tsx","components/Routes/Routes.tsx","components/Header/Header.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","assets/images/preloader.gif","components/Preloader/Preloader.tsx","components/App/App.tsx","reducers/profile-reducer.ts","reducers/store.ts","reportWebVitals.ts","index.tsx","components/pages/Login/Login.module.css","components/Routes/Routes.module.css","components/pages/Error404/Error404.module.css","components/pages/PasswordRecovery/PasswordRecovery.module.css","components/pages/Profile/Profile.module.css","components/Preloader/Preloader.module.css"],"names":["Error404","className","styles","error404","instance","axios","create","baseURL","withCredentials","RequestForgetPasswordObject","email","from","message","api","data","post","delete","password","resetPasswordToken","apiPacks","page","pageCount","get","initialState","status","error","setAppStatusAC","type","setAppErrorAC","isLoggedIn","isInitialized","setUserDataAC","setIsLoggedInAC","value","authMeTC","dispatch","then","res","catch","e","response","Login","useDispatch","isUserLoggedIn","useSelector","state","login","formik","useFormik","initialValues","rememberMe","validate","values","errors","test","length","onSubmit","resetForm","to","loginFormContainer","handleSubmit","FormControl","FormGroup","TextField","label","margin","getFieldProps","touched","style","color","FormControlLabel","control","Checkbox","onChange","handleChange","checked","name","Button","variant","forgetPasswordContainer","PATH","passwordRecovery","info","isMailSent","isMailSentAC","PasswordRecovery","sentMailResponse","Profile","userProfileData","profile","avatar","passwordIsSet","SetNewPassword","newPassword","useParams","repeatPassword","changePasswordTC","isSignUp","setIsSignUpAC","SignUp","registration","packs","columns","id","cardPacksTotalCount","maxCardsCount","minCardsCount","getPacksTC","setCurrentPageAC","setPacksAC","cardPacks","setCardPacksTotalCountAC","currentPage","useStyles","makeStyles","nav","display","justifyContent","marginBottom","ul","listStyle","padding","Pagination","props","classes","items","usePagination","count","totalCount","map","index","selected","item","children","fontWeight","undefined","fontSize","marginRight","onClick","onPageChanged","Packs","pageSize","pagesAmount","Math","ceil","useEffect","TableContainer","component","Paper","Table","TableHead","TableRow","column","TableCell","colSpan","alert","TableBody","pack","cardsCount","grade","updated","IconButton","Edit","Delete","_id","pageNumber","signUp","Routes","currentDisplay","exact","path","render","theme","root","flexGrow","backgroundColor","palette","background","paper","Header","useState","selectedTab","setSelectedTab","event","newValue","AppBar","position","Tabs","aria-label","Tab","Link","Alert","elevation","ErrorSnackbar","app","isOpen","Snackbar","open","autoHideDuration","onClose","reason","severity","Preloader","loader","src","preloader","alt","App","reducers","combineReducers","action","store","createStore","applyMiddleware","thunk","window","console","log","getState","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.2fa6d58c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport styles from \"./Error404.module.css\"\r\n\r\nexport const Error404 = () => {\r\n    return (\r\n        <div className={styles.error404}>\r\n            <div>404</div>\r\n            <div>Page not found!</div>\r\n            <div>— ฅ/ᐠ. ̫  .ᐟ\\ฅ—</div>\r\n        </div>\r\n    );\r\n}\r\n","import axios from \"axios\";\r\nimport { LoginFormData } from \"../reducers/login-reducer\";\r\n\r\n\r\nconst instance = axios.create({\r\n    baseURL: `https://neko-back.herokuapp.com/2.0`,\r\n    // baseURL: `http://localhost:7542/2.0/`,\r\n    withCredentials: true\r\n})\r\n\r\nconst RequestForgetPasswordObject: RequestForgetPasswordType = {\r\n    email: '',\r\n    from: `test-front-admin <ai73a@yandex.by>`,\r\n    message: `<div style=\"background-color: lime; padding: 15px\">password recovery link: \r\n              <a href='http://localhost:3000/friday-cards-project#/newPassword/$token$'>link</a></div>`\r\n}\r\n\r\n//api\r\nexport const api = {\r\n    login(data: LoginFormData) {\r\n        return instance.post<ResponseUserDataType>('/auth/login', data)\r\n    },\r\n    logout() {\r\n        return instance.delete('/auth/me', {})\r\n    },\r\n    authMe(){\r\n        return instance.post('/auth/me', {})\r\n    },\r\n    signUp(email: string, password: string) {\r\n        return instance.post<ResponseSignUpType>(`auth/register`, { email, password })\r\n    },\r\n    forgotPassword(email: string) {\r\n        return instance.post<ResponseForgetPasswordType>(`auth/forgot`, {...RequestForgetPasswordObject, email})\r\n    },\r\n    recoverPassword(password: string, resetPasswordToken: string) {\r\n        return instance.post<SetPasswordResponseType>(`auth/set-new-password`, {\r\n            password,\r\n            resetPasswordToken\r\n        })\r\n    }\r\n}\r\n\r\nexport const apiPacks = {\r\n    getPacks(page: number = 1, pageCount: number = 8)  {\r\n        return instance.get(`cards/pack?page=${page}&pageCount=${pageCount}`)\r\n    }\r\n}\r\n\r\n//types\r\nexport type ResponseUserDataType = {\r\n    _id: string\r\n    email: string\r\n    name: string\r\n    avatar?: string\r\n    publicCardPacksCount: number // packs counter\r\n    created: string\r\n    updated: string\r\n    isAdmin: boolean\r\n    verified: boolean // email confirmation\r\n    rememberMe: boolean\r\n    error?: string\r\n}\r\n\r\n\r\ntype ResponseSignUpType = {\r\n    addedUser: any\r\n    error?: string | null\r\n}\r\n\r\ntype RequestForgetPasswordType = {\r\n    email: string\r\n    from: string\r\n    message: string\r\n}\r\n\r\ntype ResponseForgetPasswordType = {\r\n    info: string\r\n    error: string\r\n}\r\n\r\ntype SetPasswordResponseType = {\r\n    info: string\r\n    error: string\r\n}","\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type ResponseErrorType = string | null\r\n\r\nconst initialState = {\r\n    status: 'idle' as RequestStatusType,\r\n    error: null as ResponseErrorType\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS': {\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        }\r\n        case 'APP/SET-ERROR': {\r\n            return {\r\n                ...state,\r\n                error: action.error\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\r\nexport const setAppErrorAC = (error: ResponseErrorType) => ({type: 'APP/SET-ERROR', error} as const)\r\n\r\ntype ActionsType = setAppStatusActionType | setAppErrorActionType\r\nexport type setAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\nexport type setAppErrorActionType = ReturnType<typeof setAppErrorAC>","import { Dispatch } from \"redux\";\r\n\r\nimport { api, ResponseUserDataType } from \"../api/api\";\r\nimport { setAppErrorAC, setAppStatusAC } from \"./app-reducer\";\r\n\r\nexport type LoginFormData = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\ntype UserAuthData = {\r\n    data: ResponseUserDataType | null\r\n    isLoggedIn: boolean\r\n    isInitialized: boolean\r\n}\r\n\r\nconst initialState: UserAuthData = {\r\n    data: null,\r\n    isLoggedIn: false,\r\n    isInitialized: false\r\n}\r\n\r\nexport const loginReducer = (state: UserAuthData = initialState, action: ActionsType): UserAuthData => {\r\n    switch (action.type) {\r\n        case 'login/SET-USER-DATA': {\r\n            return { ...state, data: action.data }\r\n        }\r\n        case 'login/SET-IS-LOGGED-IN': {\r\n            return { ...state, isLoggedIn: action.value }\r\n        }\r\n        case 'SET-IS-INITIALIED':\r\n            return {...state, isInitialized: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setUserDataAC = (data: ResponseUserDataType | null) =>\r\n    ({ type: 'login/SET-USER-DATA', data } as const)\r\n\r\nexport const setIsLoggedInAC = (value: boolean) =>\r\n    ({ type: 'login/SET-IS-LOGGED-IN', value } as const)\r\n\r\nexport const setAppInitializedAC = (value: boolean) => ({type: 'SET-IS-INITIALIED', value} as const)\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginFormData) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    api.login(data)\r\n        .then((res) => {\r\n            dispatch(setAppStatusAC('succeeded'))\r\n            dispatch(setIsLoggedInAC(true))\r\n            dispatch(setUserDataAC(res.data))\r\n        })\r\n        .catch((e) => {\r\n            dispatch(setAppStatusAC('failed'))\r\n            const error: string = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setAppErrorAC('Error: ' + error))\r\n        })\r\n}\r\n\r\nexport const authMeTC = () => (dispatch: Dispatch) => {\r\n    // dispatch(setAppStatusAC('loading'))\r\n    api.authMe()\r\n        .then((res) => {\r\n            if (res.data) {\r\n                dispatch(setAppStatusAC('succeeded'))\r\n                dispatch(setUserDataAC(res.data))\r\n                dispatch(setIsLoggedInAC(true))\r\n            }\r\n            dispatch(setAppInitializedAC(true));\r\n        })\r\n        .catch((e) => {\r\n            dispatch(setAppStatusAC('failed'))\r\n            const error: string = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setAppErrorAC('Error: ' + error))\r\n        })\r\n}\r\n\r\nexport const logoutTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    api.logout()\r\n        .then((res) => {\r\n            dispatch(setAppStatusAC('succeeded'))\r\n            dispatch(setIsLoggedInAC(false))\r\n            dispatch(setUserDataAC(null))\r\n        })\r\n        .catch((e) => {\r\n            dispatch(setAppStatusAC('failed'))\r\n            const error: string = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setAppErrorAC('Error: ' + error))\r\n        })\r\n}\r\n\r\n// types\r\ntype ActionsType = ReturnType<typeof setIsLoggedInAC>\r\n    | ReturnType<typeof setUserDataAC>\r\n    | ReturnType<typeof setAppErrorAC>\r\n    | ReturnType<typeof setAppInitializedAC>\r\n","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { NavLink, Redirect } from \"react-router-dom\";\r\nimport { useFormik } from \"formik\";\r\nimport { Checkbox, FormControl, FormControlLabel, FormGroup, TextField, Button } from '@material-ui/core'\r\n\r\nimport styles from './Login.module.css'\r\nimport { AppRootStateType } from \"../../../reducers/store\";\r\nimport { loginTC } from \"../../../reducers/login-reducer\";\r\nimport { PATH } from \"../../Routes/Routes\";\r\n\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n    const dispatch = useDispatch()\r\n    const isUserLoggedIn = useSelector<AppRootStateType, boolean>(state => state.login.isLoggedIn)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 8) {\r\n                errors.password = 'Invalid password';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n    if (isUserLoggedIn) {\r\n        return <Redirect to={'/profile'} />\r\n    }\r\n\r\n    return (\r\n        <div className={styles.loginFormContainer}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {\r\n                            formik.touched.email && formik.errors.email\r\n                                ? <div style={{ color: 'red' }}>{formik.errors.email}</div>\r\n                                : null\r\n                        }\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        {\r\n                            formik.touched.password && formik.errors.password\r\n                                ? <div style={{ color: 'red' }}>{formik.errors.password}</div>\r\n                                : null\r\n                        }\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                onChange={formik.handleChange}\r\n                                checked={formik.values.rememberMe}\r\n                                name='rememberMe'\r\n                            />}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n            <div className={styles.forgetPasswordContainer}>\r\n                <NavLink to={PATH.passwordRecovery}>{'Forget password'}</NavLink>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n","import { Dispatch } from \"redux\";\r\nimport { api } from \"../api/api\";\r\nimport { setAppErrorAC, setAppStatusAC } from \"./app-reducer\";\r\n\r\nconst initialState = {\r\n    info: \"\",\r\n    isMailSent: false,\r\n}\r\nexport type InitialStatePasswordRecoveryType = typeof initialState\r\n\r\nexport const passwordRecoveryReducer = (state: InitialStatePasswordRecoveryType = initialState, action: ActionsType): InitialStatePasswordRecoveryType => {\r\n    switch (action.type) {\r\n        case 'FORGOT-PASSWORD-RESPONSE':\r\n            return { ...state, info: action.info }\r\n        case 'IS-MAIL-SENT':\r\n            return { ...state, isMailSent: action.isMailSent }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const ResponseForgotPasswordAC = (info: string) => ({\r\n    type: 'FORGOT-PASSWORD-RESPONSE',\r\n    info\r\n}) as const\r\n\r\nexport const isMailSentAC = (isMailSent: boolean) => {\r\n    return ({\r\n        type: 'IS-MAIL-SENT',\r\n        isMailSent\r\n    }) as const\r\n}\r\n\r\nexport const sentMailTC = (email: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    api.forgotPassword(email)\r\n        .then(res => {\r\n            dispatch(ResponseForgotPasswordAC(res.data.info))\r\n            dispatch(isMailSentAC(true))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch(error => {\r\n            dispatch(setAppStatusAC('failed'))\r\n            dispatch(setAppErrorAC('Error: ' + error.response.data.error))\r\n            dispatch(isMailSentAC(false))\r\n        })\r\n\r\n}\r\n\r\n//types\r\ntype ActionsType =\r\n    ReturnType<typeof ResponseForgotPasswordAC>\r\n    | ReturnType<typeof isMailSentAC>","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useFormik } from \"formik\";\r\nimport { Button, FormControl, FormGroup, TextField } from \"@material-ui/core\";\r\n\r\nimport styles from './PasswordRecovery.module.css'\r\nimport { AppRootStateType } from \"../../../reducers/store\";\r\nimport { InitialStatePasswordRecoveryType, sentMailTC } from \"../../../reducers/password-recovery-reducer\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n}\r\n\r\nexport const PasswordRecovery = () => {\r\n    const dispatch = useDispatch()\r\n    const passwordRecovery = useSelector<AppRootStateType, InitialStatePasswordRecoveryType>(state => state.passwordRecovery)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: ''\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(sentMailTC(values.email))\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                passwordRecovery.isMailSent\r\n                    ? <div className={styles.sentMailResponse}>\r\n                        the recovery link has been sent on your email\r\n                    </div>\r\n                    : <form onSubmit={formik.handleSubmit}>\r\n                        <FormControl>\r\n                            <FormGroup>\r\n                                <TextField\r\n                                    label=\"Email\"\r\n                                    margin=\"normal\"\r\n                                    {...formik.getFieldProps('email')}\r\n                                />\r\n                                {\r\n                                    formik.touched.email && formik.errors.email\r\n                                        ? <div style={{ color: 'red' }}>{formik.errors.email}</div>\r\n                                        : null\r\n                                }\r\n                                <Button type={'submit'} variant={'contained'} color={'primary'}>Send recovery-link</Button>\r\n                            </FormGroup>\r\n                        </FormControl>\r\n                    </form>\r\n            }\r\n        </div>\r\n\r\n    );\r\n}","import React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nimport styles from \"./Profile.module.css\"\r\nimport { ResponseUserDataType } from \"../../../api/api\";\r\nimport { AppRootStateType } from \"../../../reducers/store\";\r\nimport { authMeTC } from \"../../../reducers/login-reducer\";\r\n\r\n\r\nexport const Profile = () => {\r\n    const dispatch = useDispatch()\r\n    const userProfileData = useSelector<AppRootStateType, ResponseUserDataType | null>(state => state.login.data)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.login.isLoggedIn)\r\n    \r\n    // useEffect(() => {\r\n    //     !userProfileData && dispatch(authMeTC())\r\n    // }, [])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={'/login'} />\r\n    }\r\n\r\n    return (\r\n        <div className={styles.profile}>\r\n            {userProfileData && <div>\r\n                User name: {userProfileData.name} <br />\r\n                User email: {userProfileData.email} <br />\r\n                User avatar: {userProfileData.avatar} <br />\r\n            </div>}\r\n        </div>\r\n    );\r\n}","import { Dispatch } from \"redux\";\r\nimport { api } from \"../api/api\";\r\nimport { setAppErrorAC } from \"./app-reducer\";\r\n\r\nconst initialState: InitialStateType = {\r\n    passwordIsSet: false\r\n}\r\n\r\nexport type InitialStateType = {\r\n    passwordIsSet: boolean\r\n}\r\n\r\nexport const setNewPasswordReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"SET-NEW-PASSWORD\":\r\n            return { ...state, passwordIsSet: action.passwordIsSet }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const setNewPasswordAC = (passwordIsSet: boolean) => ({\r\n    type: 'SET-NEW-PASSWORD',\r\n    passwordIsSet\r\n}) as const\r\n\r\n//thunks\r\nexport const changePasswordTC = (password: string, resetPasswordToken: string) => (dispatch: Dispatch) => {\r\n    api.recoverPassword(password, resetPasswordToken)\r\n        .then(res => {\r\n            dispatch(setNewPasswordAC(true))\r\n        })\r\n        .catch(error => {\r\n            dispatch(setAppErrorAC('Error: ' + error.response.data.error))\r\n        })\r\n}\r\n\r\n//types\r\ntype ActionsType = ReturnType<typeof setNewPasswordAC>\r\n\r\n","import React from \"react\";\r\nimport { Redirect, useParams } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useFormik } from \"formik\";\r\nimport { Button, FormControl, FormGroup, TextField } from \"@material-ui/core\";\r\n\r\nimport { changePasswordTC, InitialStateType } from \"../../../reducers/set-new-password-reducer\";\r\nimport { AppRootStateType } from \"../../../reducers/store\";\r\n\r\n\r\ntype FormikErrorType = {\r\n    password?: string\r\n    repeatPassword?: string\r\n}\r\n\r\nexport const SetNewPassword = () => {\r\n    const dispatch = useDispatch()\r\n    const newPassword = useSelector<AppRootStateType, InitialStateType>(state => state.newPassword)\r\n    const { resetPasswordToken } = useParams<{ resetPasswordToken: string }>()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            password: '',\r\n            repeatPassword: ''\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 8) {\r\n                errors.password = 'Password must be more than 7 characters';\r\n            }\r\n\r\n            if (!values.repeatPassword) {\r\n                errors.repeatPassword = 'Required';\r\n            } else if (values.password !== values.repeatPassword) {\r\n                errors.repeatPassword = 'Passwords are not equal';\r\n            }\r\n\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(changePasswordTC(values.password, resetPasswordToken))\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n    if (newPassword.passwordIsSet) {\r\n        return <Redirect to={\"/login\"} />\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        {\r\n                            formik.touched.password && formik.errors.password\r\n                                ? <div style={{ color: 'red' }}>{formik.errors.password}</div>\r\n                                : null\r\n                        }\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Repeat password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('repeatPassword')}\r\n                        />\r\n                        {\r\n                            formik.touched.repeatPassword && formik.errors.repeatPassword\r\n                                ? <div style={{ color: 'red' }}>{formik.errors.repeatPassword}</div>\r\n                                : null\r\n                        }\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Set new password</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </div>\r\n    );\r\n}","import { Dispatch } from \"redux\"\r\nimport { api } from \"../api/api\"\r\nimport { setAppErrorAC, setAppStatusAC } from \"./app-reducer\"\r\n\r\nconst initialState = {\r\n    isSignUp: false,\r\n}\r\ntype InitialStateType = {\r\n    isSignUp: boolean\r\n}\r\n\r\nexport const signUpReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SET-IS-SIGN-UP': {\r\n            return { ...state, isSignUp: action.value }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// thunks\r\nexport const signUpTC = (email: string, password: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    api.signUp(email, password)\r\n        .then(res => {\r\n            dispatch(setAppStatusAC('succeeded'))\r\n            dispatch(setIsSignUpAC(true))\r\n        })\r\n        .catch(error => {\r\n            dispatch(setAppStatusAC('failed'))\r\n            dispatch(setAppErrorAC('Error: ' + error.response.data.error))\r\n        })\r\n}\r\n\r\n// actions\r\nexport const setIsSignUpAC = (value: boolean) => ({ type: 'SET-IS-SIGN-UP', value } as const)\r\nexport const setSignUpErrorAC = (error: string | null) => ({ type: 'SET-ERROR-SIGN-UP', error } as const)\r\n\r\n// types\r\ntype ActionsType = ReturnType<typeof setIsSignUpAC> | ReturnType<typeof setSignUpErrorAC>","import { useFormik } from \"formik\";\r\nimport React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { FormControl, FormGroup, TextField, Button } from '@material-ui/core'\r\n\r\nimport { signUpTC } from \"../../../reducers/signUp-reducer\";\r\nimport { AppRootStateType } from \"../../../reducers/store\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    repeatPassword?: string\r\n}\r\n\r\nexport const SignUp = () => {\r\n    const dispatch = useDispatch()\r\n    const isSignUp = useSelector<AppRootStateType, boolean>((state) => state.registration.isSignUp)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            repeatPassword: ''\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 8) {\r\n                errors.password = 'Password must be more than 7 characters';\r\n            }\r\n\r\n            if (!values.repeatPassword) {\r\n                errors.repeatPassword = 'Required';\r\n            } else if (values.password !== values.repeatPassword) {\r\n                errors.repeatPassword = 'Passwords are not equal';\r\n            }\r\n\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(signUpTC(values.email, values.password))\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n    if (isSignUp) {\r\n        return <Redirect to={'/login'} />\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {\r\n                            formik.touched.email && formik.errors.email\r\n                                ? <div style={{ color: 'red' }}>{formik.errors.email}</div>\r\n                                : null\r\n                        }\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        {\r\n                            formik.touched.password && formik.errors.password\r\n                                ? <div style={{ color: 'red' }}>{formik.errors.password}</div>\r\n                                : null\r\n                        }\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Repeat password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('repeatPassword')}\r\n                        />\r\n                        {\r\n                            formik.touched.repeatPassword && formik.errors.repeatPassword\r\n                                ? <div style={{ color: 'red' }}>{formik.errors.repeatPassword}</div>\r\n                                : null\r\n                        }\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Sign up</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </div>\r\n    );\r\n}","import { Dispatch } from \"redux\"\r\nimport { apiPacks } from \"../api/api\"\r\nimport { setAppErrorAC, setAppStatusAC } from \"./app-reducer\"\r\n\r\n\r\nconst initialState = {\r\n    packs: [],\r\n    columns: [\r\n        { id: 1, name: 'Name' },\r\n        { id: 2, name: 'Amount of cards' },\r\n        { id: 3, name: 'Grade' },\r\n        { id: 4, name: 'Date of updates' }\r\n    ],\r\n    page: 1,\r\n    pageCount: 8,\r\n    cardPacksTotalCount: 8,\r\n    maxCardsCount: null,\r\n    minCardsCount: null,\r\n}\r\n\r\nexport type PackType = {\r\n    _id: string\r\n    user_id: string\r\n    name: string\r\n    path: string\r\n    cardsCount: number\r\n    grade: number\r\n    shots: number\r\n    rating: number\r\n    type: string\r\n    created: string\r\n    updated: string\r\n    __v: number\r\n}\r\n\r\nexport type ColumnType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\ntype InitialStateType = {\r\n    packs: Array<PackType>\r\n    columns: Array<ColumnType>\r\n    page: number\r\n    pageCount: number\r\n    cardPacksTotalCount: number\r\n    maxCardsCount: number | null\r\n    minCardsCount: number | null\r\n}\r\n\r\nexport const packsReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SET-PACKS': {\r\n            return { ...state, packs: action.packs }\r\n        }\r\n        case 'SET-PACKS-TOTAL-COUNT': {\r\n            return { ...state, cardPacksTotalCount: action.cardPacksTotalCount }\r\n        }\r\n        case 'SET-CURRENT-PAGE': {\r\n            return { ...state, page: action.currentPage }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// thunks\r\nexport const getPacksTC = (page: number, pageCount: number) => (dispatch: Dispatch) => {\r\n    // dispatch(setAppStatusAC('loading'))\r\n    dispatch(setCurrentPageAC(page))\r\n    apiPacks.getPacks(page, pageCount)\r\n        .then(res => {\r\n            dispatch(setAppStatusAC('succeeded'))\r\n            dispatch(setPacksAC(res.data.cardPacks))\r\n            dispatch(setCardPacksTotalCountAC(res.data.cardPacksTotalCount))\r\n        })\r\n        .catch(error => {\r\n            dispatch(setAppStatusAC('failed'))\r\n            dispatch(setAppErrorAC('Error: ' + error.response.data.error))\r\n        })\r\n}\r\n\r\n// actions\r\nexport const setPacksAC = (packs: Array<PackType>) => ({ type: 'SET-PACKS', packs } as const)\r\n\r\nexport const setCurrentPageAC = (currentPage: number) => ({ type: 'SET-CURRENT-PAGE', currentPage } as const)\r\n\r\nexport const setCardPacksTotalCountAC = (cardPacksTotalCount: number) => ({ type: 'SET-PACKS-TOTAL-COUNT', cardPacksTotalCount } as const)\r\n\r\n// types\r\ntype ActionsType = ReturnType<typeof setPacksAC>\r\n    | ReturnType<typeof setCurrentPageAC>\r\n    | ReturnType<typeof setCardPacksTotalCountAC>","import React from 'react';\r\nimport { usePagination } from '@material-ui/lab/Pagination';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\ntype PaginationPropsType = {\r\n    totalCount: number\r\n    onPageChanged: (pageNumber: number) => void\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n    nav: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        marginBottom: '13px',\r\n    },\r\n    ul: {\r\n        listStyle: 'none',\r\n        padding: 0,\r\n        margin: 0,\r\n        display: 'flex',\r\n        color: 'black'\r\n    },\r\n});\r\n\r\nexport default function Pagination(props: PaginationPropsType) {\r\n    const classes = useStyles();\r\n    const { items } = usePagination({\r\n        count: props.totalCount,\r\n    });\r\n\r\n    return (\r\n        <nav className={classes.nav}>\r\n            <ul className={classes.ul}>\r\n                {items.map(({ page, type, selected, ...item }, index) => {\r\n                    let children = null;\r\n\r\n                    if (type === 'start-ellipsis' || type === 'end-ellipsis') {\r\n                        children = '…';\r\n                    } else if (type === 'page') {\r\n                        children = (\r\n                            <button type=\"button\" style={{ fontWeight: selected ? 'bold' : undefined, fontSize: '20px', marginRight: '7px' }} {...item} >\r\n                                {page}\r\n                            </button>\r\n                        );\r\n                    } else {\r\n                        children = (\r\n                            <button type=\"button\" style={{ fontSize: '20px', marginRight: '7px' }} {...item} >\r\n                                {type}\r\n                            </button>\r\n                        );\r\n                    }\r\n\r\n                    return <li key={index} onClick={(e) => { props.onPageChanged(page) }}>{children}</li>;\r\n                })}\r\n            </ul>\r\n        </nav>\r\n    );\r\n}","import * as React from 'react';\r\nimport { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\n\r\nimport { AppRootStateType } from '../../../reducers/store';\r\nimport { ColumnType, getPacksTC, PackType } from '../../../reducers/packs-reducer';\r\nimport Pagination from '../../common/Pagination';\r\nimport { authMeTC } from '../../../reducers/login-reducer';\r\n\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport { Delete, Edit } from '@material-ui/icons';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport Button from '@material-ui/core/Button';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport Table from '@material-ui/core/Table';\r\n\r\nexport function Packs() {\r\n    const dispatch = useDispatch()\r\n    const packs = useSelector<AppRootStateType, Array<PackType>>(state => state.packs.packs)\r\n    const columns = useSelector<AppRootStateType, Array<ColumnType>>(state => state.packs.columns)\r\n    const cardPacksTotalCount = useSelector<AppRootStateType, number>(state => state.packs.cardPacksTotalCount)\r\n    const pageSize = useSelector<AppRootStateType, number>(state => state.packs.pageCount)\r\n    const currentPage = useSelector<AppRootStateType, number>(state => state.packs.page)\r\n    const pagesAmount = Math.ceil(cardPacksTotalCount / pageSize)\r\n\r\n    const onPageChanged = (pageNumber: number) => {\r\n        dispatch(getPacksTC(pageNumber, pageSize))\r\n    }\r\n\r\n    useEffect(() => {\r\n        dispatch(authMeTC())\r\n        dispatch(getPacksTC(currentPage, pageSize))\r\n    }, [])\r\n\r\n    return (\r\n        <TableContainer component={Paper}>\r\n            <Table>\r\n                <TableHead>\r\n                    <TableRow >\r\n                        {columns.map(column => {\r\n                            return (\r\n                                <TableCell key={column.id} component='th' style={{ fontWeight: 'bold' }}>{column.name}</TableCell >\r\n                            )\r\n                        })}\r\n                        <TableCell colSpan={2}>\r\n                            <Button color=\"primary\" variant={'contained'} onClick={() => alert(\"add\")}>\r\n                                Add pack\r\n                        </Button>\r\n                        </TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {packs.map(pack => {\r\n                        return (\r\n                            <TableRow key={pack._id}>\r\n                                <TableCell>{pack.name}</TableCell>\r\n                                <TableCell>{pack.cardsCount}</TableCell>\r\n                                <TableCell>{pack.grade}</TableCell>\r\n                                <TableCell>{pack.updated}</TableCell>\r\n                                <TableCell>\r\n                                    <IconButton onClick={() => alert(\"edit\")}>\r\n                                        <Edit color=\"primary\" />\r\n                                    </IconButton></TableCell>\r\n                                <TableCell>\r\n                                    <IconButton onClick={() => alert(\"delete\")}>\r\n                                        <Delete color=\"secondary\" />\r\n                                    </IconButton>\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        )\r\n                    })}\r\n                </TableBody>\r\n            </Table>\r\n            {/* <Pagination totalCount={pagesAmount} onPageChanged={onPageChanged} /> */}\r\n            <Pagination totalCount={pagesAmount} onPageChanged={onPageChanged} />\r\n        </TableContainer>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport { Route, Switch, Redirect } from \"react-router-dom\";\r\n\r\nimport styles from './Routes.module.css'\r\nimport { Error404 } from \"../pages/Error404/Error404\";\r\nimport { Login } from \"../pages/Login/Login\";\r\nimport { PasswordRecovery } from \"../pages/PasswordRecovery/PasswordRecovery\";\r\nimport { Profile } from \"../pages/Profile/Profile\";\r\nimport { SetNewPassword } from \"../pages/SetNewPassword/SetNewPassword\";\r\nimport { SignUp } from \"../pages/SignUp/SignUp\";\r\nimport {Packs} from \"../pages/Packs/Packs\";\r\n\r\n\r\nexport const PATH = {\r\n    login: '/login',\r\n    passwordRecovery: '/passwordRecovery',\r\n    profile: '/profile',\r\n    signUp: '/signUp',\r\n    newPassword: '/newPassword',\r\n    error: '/404',\r\n    packs: '/packs'\r\n}\r\n\r\n\r\nexport const Routes = () => {\r\n    return (\r\n        <div className={styles.currentDisplay}>\r\n            <Switch>\r\n                <Route exact path={'/'} render={() => <Redirect to={PATH.login} />} />\r\n                <Route path={PATH.login} render={() => <Login />} />\r\n                <Route exact path={PATH.signUp} render={() => <SignUp />} />\r\n                <Route exact path={PATH.profile} render={() => <Profile />} />\r\n                <Route exact path={PATH.packs} render={() => <Packs />} />\r\n                <Route exact path={PATH.passwordRecovery} render={() => <PasswordRecovery />} />\r\n                <Route path={`${PATH.newPassword}/:resetPasswordToken`} render={() => <SetNewPassword />} />\r\n                <Route path={PATH.error} render={() => <Error404 />} />\r\n                <Redirect from={'*'} to={PATH.error} />\r\n            </Switch>\r\n        </div>\r\n    );\r\n}","import React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport { makeStyles, Theme } from \"@material-ui/core/styles\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport Tab from \"@material-ui/core/Tab\";\r\n\r\nimport { PATH } from \"../Routes/Routes\";\r\nimport { AppRootStateType } from \"../../reducers/store\";\r\nimport { logoutTC } from \"../../reducers/login-reducer\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        backgroundColor: theme.palette.background.paper,\r\n    },\r\n}));\r\n\r\nfunction Header() {\r\n    const dispatch = useDispatch()\r\n    const isUserLoggedIn = useSelector<AppRootStateType, boolean>(state => state.login.isLoggedIn)\r\n\r\n    const [selectedTab, setSelectedTab] = useState('');\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleChange = (event: React.ChangeEvent<{}>, newValue: string) => {\r\n        setSelectedTab(newValue);\r\n    };\r\n\r\n    const onLogoutClickHandler = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n    if (isUserLoggedIn) {\r\n        return <div className={classes.root}>\r\n            <AppBar position=\"static\">\r\n                <Tabs value={selectedTab} onChange={handleChange} aria-label=\"header tabs\">\r\n                    <Tab label='profile' value='/profile' component={Link} to={PATH.profile} />\r\n                    <Tab label='packs' value='/packs' component={Link} to={PATH.packs} />\r\n                    <Tab label='logout' onClick={onLogoutClickHandler} />\r\n                </Tabs>\r\n            </AppBar>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <AppBar position=\"static\">\r\n                <Tabs value={selectedTab} onChange={handleChange} aria-label=\"simple tabs example\">\r\n                    <Tab label='login' value='/login' component={Link} to={PATH.login} />\r\n                    <Tab label='sign up' value='/signUp' component={Link} to={PATH.signUp} />\r\n                </Tabs>\r\n            </AppBar>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Header;","import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, { AlertProps } from '@material-ui/lab/Alert'\r\n\r\nimport { AppRootStateType } from '../../reducers/store'\r\nimport { setAppErrorAC } from '../../reducers/app-reducer'\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    const dispatch = useDispatch()\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error);\r\n    const isOpen = error !== null;\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC(null));\r\n    }\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}","export default __webpack_public_path__ + \"static/media/preloader.9ca08101.gif\";","import preloader from '../../assets/images/preloader.gif'\r\nimport style from './Preloader.module.css'\r\n\r\nexport const Preloader = () => {\r\n    return (\r\n        <div className={style.loader}>\r\n            <img src={preloader} alt=\"preloader\"/>\r\n        </div>\r\n    )\r\n}","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport './App.css'\r\nimport Header from '../Header/Header';\r\nimport { Routes } from \"../Routes/Routes\";\r\nimport { ErrorSnackbar } from '../ErrorSnackbar/ErrorSnackbar';\r\nimport { AppRootStateType } from '../../reducers/store';\r\nimport { RequestStatusType } from '../../reducers/app-reducer';\r\nimport { Preloader } from '../Preloader/Preloader';\r\nimport { authMeTC } from '../../reducers/login-reducer';\r\n\r\n\r\nexport const App = () => {\r\n  const dispatch = useDispatch()\r\n  const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n\r\n  useEffect(() => {\r\n    dispatch(authMeTC())\r\n}, [])\r\n\r\n\r\n  if (status === 'loading') {\r\n    return <Preloader />\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Header />\r\n      <ErrorSnackbar />\r\n      <Routes />\r\n    </div>\r\n  );\r\n}\r\n","const initialState = {}\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const profileReducer = (state: InitialStateType = initialState, action: any): InitialStateType => {\r\n    switch (action.type) {\r\n        default:\r\n            return state\r\n    }\r\n}","import { applyMiddleware, combineReducers } from \"redux\";\r\nimport { createStore } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nimport { loginReducer } from \"./login-reducer\";\r\nimport { passwordRecoveryReducer } from \"./password-recovery-reducer\";\r\nimport { profileReducer } from \"./profile-reducer\";\r\nimport { setNewPasswordReducer } from \"./set-new-password-reducer\";\r\nimport { appReducer } from \"./app-reducer\";\r\nimport { signUpReducer } from \"./signUp-reducer\";\r\nimport { packsReducer } from \"./packs-reducer\";\r\n\r\nconst reducers = combineReducers({\r\n    login: loginReducer,\r\n    registration: signUpReducer,\r\n    profile: profileReducer,\r\n    passwordRecovery: passwordRecoveryReducer,\r\n    newPassword: setNewPasswordReducer,\r\n    app: appReducer,\r\n    packs: packsReducer\r\n});\r\n\r\nexport const store = createStore(reducers, applyMiddleware(thunk));\r\n\r\nexport type AppRootStateType = ReturnType<typeof reducers>\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\nconsole.log(store.getState())","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { HashRouter } from 'react-router-dom';\r\n\r\nimport { App } from './components/App/App';\r\nimport './index.css';\r\nimport { store } from './reducers/store';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n    <HashRouter>\r\n        <Provider store={store}>\r\n            <App />\r\n        </Provider>\r\n    </HashRouter>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginFormContainer\":\"Login_loginFormContainer__2aD1U\",\"forgetPasswordContainer\":\"Login_forgetPasswordContainer__2P8CS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"currentDisplay\":\"Routes_currentDisplay__1z_mw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error404\":\"Error404_error404__3GaOV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sentMailResponse\":\"PasswordRecovery_sentMailResponse__1B0QB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__27UMu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"Preloader_loader__2rl41\"};"],"sourceRoot":""}