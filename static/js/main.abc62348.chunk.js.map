{"version":3,"sources":["components/pages/Profile/Profile.module.css","components/pages/Error404/Error404.tsx","api/api.ts","reducers/app-reducer.ts","reducers/login-reducer.ts","assets/images/preloader.gif","components/Preloader/Preloader.tsx","components/pages/Login/Login.tsx","reducers/password-recovery-reducer.ts","components/pages/PasswordRecovery/PasswordRecovery.tsx","components/pages/Profile/Profile.tsx","reducers/set-new-password-reducer.ts","components/pages/SetNewPassword/SetNewPassword.tsx","reducers/signUp-reducer.ts","components/pages/SignUp/SignUp.tsx","reducers/packs-reducer.ts","components/common/Pagination/Pagination.tsx","components/pages/Packs/Pack/Pack.tsx","components/pages/Packs/Packs.tsx","components/pages/Cards/Cards.tsx","components/Routes/Routes.tsx","components/Header/Header.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","components/App/App.tsx","reducers/cards-reducer.ts","reducers/profile-reducer.ts","reducers/store.ts","reportWebVitals.ts","index.tsx","components/pages/Login/Login.module.css","components/Routes/Routes.module.css","components/pages/Error404/Error404.module.css","components/Preloader/Preloader.module.css","components/pages/PasswordRecovery/PasswordRecovery.module.css"],"names":["module","exports","Error404","className","styles","error404","instance","axios","create","baseURL","withCredentials","RequestForgetPasswordObject","email","from","message","api","data","post","delete","password","resetPasswordToken","apiPacks","page","pageCount","get","name","privateProperty","cardsPack","private","id","packID","put","_id","initialState","status","error","isInitialized","setAppStatusAC","type","setAppErrorAC","isLoggedIn","setUserDataAC","setIsLoggedInAC","value","Preloader","style","loader","src","preloader","alt","Login","dispatch","useDispatch","isUserLoggedIn","useSelector","state","login","app","formik","useFormik","initialValues","rememberMe","validate","values","errors","test","length","onSubmit","then","res","catch","e","response","resetForm","to","loginFormContainer","handleSubmit","FormControl","FormGroup","TextField","label","margin","getFieldProps","touched","color","FormControlLabel","control","Checkbox","onChange","handleChange","checked","Button","variant","forgetPasswordContainer","PATH","passwordRecovery","info","isMailSent","isMailSentAC","PasswordRecovery","sentMailResponse","Profile","userProfileData","profile","avatar","passwordIsSet","SetNewPassword","newPassword","useParams","repeatPassword","changePasswordTC","isSignUp","setIsSignUpAC","SignUp","registration","packs","columns","cardPacksTotalCount","getPacksTC","setCurrentPageAC","setPacksAC","cardPacks","setCardPacksTotalCountAC","addPackTC","getState","currentPage","useStyles","makeStyles","nav","display","justifyContent","marginBottom","ul","listStyle","padding","Pagination","props","classes","items","usePagination","count","totalCount","map","index","selected","item","children","fontWeight","undefined","fontSize","marginRight","onClick","onPageChanged","Pack","cardsCount","grade","updated","TableRow","TableCell","IconButton","updatePack","Edit","deletePack","Delete","Packs","pageSize","pagesAmount","Math","ceil","deletePackTC","updatePackTC","useEffect","TableContainer","component","Paper","Table","TableHead","column","colSpan","TableBody","pack","pageNumber","Cards","cards","cardsTotalCount","alert","signUp","Routes","currentDisplay","exact","path","render","theme","root","flexGrow","backgroundColor","palette","background","paper","Header","useState","selectedTab","setSelectedTab","event","newValue","AppBar","position","Tabs","aria-label","Tab","Link","Alert","elevation","ErrorSnackbar","isOpen","Snackbar","open","autoHideDuration","onClose","reason","severity","App","finally","reducers","combineReducers","action","store","createStore","applyMiddleware","thunk","window","console","log","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.abc62348.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__27UMu\"};","import React from \"react\";\r\nimport styles from \"./Error404.module.css\"\r\n\r\nexport const Error404 = () => {\r\n    return (\r\n        <div className={styles.error404}>\r\n            <div>404</div>\r\n            <div>Page not found!</div>\r\n            <div>— ฅ/ᐠ. ̫  .ᐟ\\ฅ—</div>\r\n        </div>\r\n    );\r\n}\r\n","import axios from \"axios\";\r\nimport { LoginFormData } from \"../reducers/login-reducer\";\r\n\r\n\r\nconst instance = axios.create({\r\n    // baseURL: `https://neko-back.herokuapp.com/2.0`,\r\n    baseURL: `http://localhost:7542/2.0/`,\r\n    withCredentials: true\r\n})\r\n\r\nconst RequestForgetPasswordObject: RequestForgetPasswordType = {\r\n    email: '',\r\n    from: `test-front-admin <ai73a@yandex.by>`,\r\n    message: `<div style=\"background-color: lime; padding: 15px\">password recovery link: \r\n              <a href='http://localhost:3000/friday-cards-project#/newPassword/$token$'>link</a></div>`\r\n}\r\n\r\n//api\r\nexport const api = {\r\n    login(data: LoginFormData) {\r\n        return instance.post('auth/login', data)\r\n    },\r\n    logout() {\r\n        return instance.delete('auth/me', {})\r\n    },\r\n    authMe() {\r\n        return instance.post('auth/me', {})\r\n    },\r\n    signUp(email: string, password: string) {\r\n        return instance.post<ResponseSignUpType>(`auth/register`, { email, password })\r\n    },\r\n    forgotPassword(email: string) {\r\n        return instance.post<ResponseForgetPasswordType>(`auth/forgot`, { ...RequestForgetPasswordObject, email })\r\n    },\r\n    recoverPassword(password: string, resetPasswordToken: string) {\r\n        return instance.post<SetPasswordResponseType>(`auth/set-new-password`, {\r\n            password,\r\n            resetPasswordToken\r\n        })\r\n    }\r\n}\r\n\r\nexport const apiPacks = {\r\n    getPacks(page: number = 1, pageCount: number = 8) {\r\n        return instance.get(`cards/pack?page=${page}&pageCount=${pageCount}&user_id=604b5ecc479fbc000443b3e1`)\r\n    },\r\n    addPack(name: string, privateProperty: boolean = true) {\r\n        return instance.post(`cards/pack`, {\r\n            cardsPack: { name, private: privateProperty }\r\n        })\r\n    },\r\n    deletePack(id: string) {\r\n        return instance.delete(`cards/pack?id=${id}`)\r\n    },\r\n    updatePack(packID: string) {\r\n        return instance.put(`cards/pack`, {\r\n            cardsPack: { _id: packID, name: 'NEW-PACK-NAME' }\r\n        })\r\n    },\r\n}\r\n\r\nexport const apiCards = {\r\n    getCards(page: number = 1, pageCount: number = 8, packID: string) {\r\n        return instance.get(`cards/cards/cards?cardsPack_id=${packID}&page=${page}&pageCount=${pageCount}`)\r\n    }\r\n}\r\n\r\n//types\r\nexport type ResponseUserDataType = {\r\n    _id: string\r\n    email: string\r\n    name: string\r\n    avatar?: string\r\n    publicCardPacksCount: number // packs counter\r\n    created: string\r\n    updated: string\r\n    isAdmin: boolean\r\n    verified: boolean // email confirmation\r\n    rememberMe: boolean\r\n    error?: string\r\n}\r\n\r\n\r\ntype ResponseSignUpType = {\r\n    addedUser: any\r\n    error?: string | null\r\n}\r\n\r\ntype RequestForgetPasswordType = {\r\n    email: string\r\n    from: string\r\n    message: string\r\n}\r\n\r\ntype ResponseForgetPasswordType = {\r\n    info: string\r\n    error: string\r\n}\r\n\r\ntype SetPasswordResponseType = {\r\n    info: string\r\n    error: string\r\n}","\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type ResponseErrorType = string | null\r\nexport type IsInitializedType = boolean\r\n\r\nconst initialState = {\r\n    status: 'idle' as RequestStatusType,\r\n    error: null as ResponseErrorType,\r\n    isInitialized: false as IsInitializedType\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS': {\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        }\r\n        case 'APP/SET-ERROR': {\r\n            return {\r\n                ...state,\r\n                error: action.error\r\n            }\r\n        }\r\n        case 'APP/SET-IS-INITIALIZED': {\r\n            return {\r\n                ...state,\r\n                isInitialized: action.isInitialized\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\r\nexport const setAppErrorAC = (error: ResponseErrorType) => ({type: 'APP/SET-ERROR', error} as const)\r\nexport const setAppInitializedAC = (isInitialized: boolean) => ({type: 'APP/SET-IS-INITIALIZED', isInitialized} as const)\r\n\r\n// types\r\nexport type setAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\nexport type setAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type setAppInitializedType = ReturnType<typeof setAppInitializedAC>\r\n\r\ntype ActionsType = setAppStatusActionType | setAppErrorActionType | setAppInitializedType","import { Dispatch } from \"redux\";\r\n\r\nimport { api, ResponseUserDataType } from \"../api/api\";\r\nimport { setAppErrorAC, setAppInitializedAC, setAppStatusAC } from \"./app-reducer\";\r\n\r\nexport type LoginFormData = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\ntype UserAuthData = {\r\n    data: ResponseUserDataType | null\r\n    isLoggedIn: boolean\r\n}\r\n\r\nconst initialState: UserAuthData = {\r\n    data: null,\r\n    isLoggedIn: false\r\n}\r\n\r\nexport const loginReducer = (state: UserAuthData = initialState, action: ActionsType): UserAuthData => {\r\n    switch (action.type) {\r\n        case 'login/SET-USER-DATA': {\r\n            return { ...state, data: action.data }\r\n        }\r\n        case 'login/SET-IS-LOGGED-IN': {\r\n            return { ...state, isLoggedIn: action.value }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setUserDataAC = (data: ResponseUserDataType | null) =>\r\n    ({ type: 'login/SET-USER-DATA', data } as const)\r\n\r\nexport const setIsLoggedInAC = (value: boolean) =>\r\n    ({ type: 'login/SET-IS-LOGGED-IN', value } as const)\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginFormData) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    api.login(data)\r\n        .then((res) => {\r\n            dispatch(setAppStatusAC('succeeded'))\r\n            dispatch(setIsLoggedInAC(true))\r\n            dispatch(setUserDataAC(res.data))\r\n        })\r\n        .catch((e) => {\r\n            dispatch(setAppStatusAC('failed'))\r\n            const error: string = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setAppErrorAC('Error: ' + error))\r\n        })\r\n}\r\n\r\nexport const authMeTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    api.authMe()\r\n        .then((res) => {\r\n            dispatch(setAppStatusAC('succeeded'))\r\n            dispatch(setUserDataAC(res.data))\r\n            dispatch(setIsLoggedInAC(true))\r\n        })\r\n        .catch((e) => {\r\n            dispatch(setAppStatusAC('failed'))\r\n            const error: string = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setAppErrorAC('Error: ' + error))\r\n        })\r\n        .finally(() => {\r\n            dispatch(setAppInitializedAC(true));\r\n        })\r\n}\r\n\r\nexport const logoutTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    api.logout()\r\n        .then((res) => {\r\n            dispatch(setAppStatusAC('succeeded'))\r\n            dispatch(setIsLoggedInAC(false))\r\n            dispatch(setUserDataAC(null))\r\n        })\r\n        .catch((e) => {\r\n            dispatch(setAppStatusAC('failed'))\r\n            const error: string = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setAppErrorAC('Error: ' + error))\r\n        })\r\n}\r\n\r\n// types\r\ntype ActionsType = ReturnType<typeof setIsLoggedInAC> | ReturnType<typeof setUserDataAC> | ReturnType<typeof setAppErrorAC>\r\n","export default __webpack_public_path__ + \"static/media/preloader.9ca08101.gif\";","import preloader from '../../assets/images/preloader.gif'\r\nimport style from './Preloader.module.css'\r\n\r\nexport const Preloader = () => {\r\n    return (\r\n        <div className={style.loader}>\r\n            <img src={preloader} alt=\"preloader\"/>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { NavLink, Redirect } from \"react-router-dom\";\r\nimport { useFormik } from \"formik\";\r\nimport { Checkbox, FormControl, FormControlLabel, FormGroup, TextField, Button } from '@material-ui/core'\r\n\r\nimport styles from './Login.module.css'\r\nimport { AppRootStateType } from \"../../../reducers/store\";\r\nimport { loginTC } from \"../../../reducers/login-reducer\";\r\nimport { PATH } from \"../../Routes/Routes\";\r\nimport { Preloader } from \"../../Preloader/Preloader\";\r\n\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n    const dispatch = useDispatch()\r\n    const isUserLoggedIn = useSelector<AppRootStateType, boolean>(state => state.login.isLoggedIn)\r\n    const status = useSelector<AppRootStateType, string>(state => state.app.status)\r\n    \r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 8) {\r\n                errors.password = 'Invalid password';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n    if (status === 'loading') {\r\n        return <Preloader />\r\n    }\r\n\r\n    if (isUserLoggedIn) {\r\n        return <Redirect to={'/profile'} />\r\n    }\r\n\r\n    return (\r\n        <div className={styles.loginFormContainer}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {\r\n                            formik.touched.email && formik.errors.email\r\n                                ? <div style={{ color: 'red' }}>{formik.errors.email}</div>\r\n                                : null\r\n                        }\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        {\r\n                            formik.touched.password && formik.errors.password\r\n                                ? <div style={{ color: 'red' }}>{formik.errors.password}</div>\r\n                                : null\r\n                        }\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                onChange={formik.handleChange}\r\n                                checked={formik.values.rememberMe}\r\n                                name='rememberMe'\r\n                            />}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n            <div className={styles.forgetPasswordContainer}>\r\n                <NavLink to={PATH.passwordRecovery}>{'Forget password'}</NavLink>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n","import { Dispatch } from \"redux\";\r\nimport { api } from \"../api/api\";\r\nimport { setAppErrorAC, setAppStatusAC } from \"./app-reducer\";\r\n\r\nconst initialState = {\r\n    info: \"\",\r\n    isMailSent: false,\r\n}\r\nexport type InitialStatePasswordRecoveryType = typeof initialState\r\n\r\nexport const passwordRecoveryReducer = (state: InitialStatePasswordRecoveryType = initialState, action: ActionsType): InitialStatePasswordRecoveryType => {\r\n    switch (action.type) {\r\n        case 'FORGOT-PASSWORD-RESPONSE':\r\n            return { ...state, info: action.info }\r\n        case 'IS-MAIL-SENT':\r\n            return { ...state, isMailSent: action.isMailSent }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const ResponseForgotPasswordAC = (info: string) => ({\r\n    type: 'FORGOT-PASSWORD-RESPONSE',\r\n    info\r\n}) as const\r\n\r\nexport const isMailSentAC = (isMailSent: boolean) => {\r\n    return ({\r\n        type: 'IS-MAIL-SENT',\r\n        isMailSent\r\n    }) as const\r\n}\r\n\r\nexport const sentMailTC = (email: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    api.forgotPassword(email)\r\n        .then(res => {\r\n            dispatch(ResponseForgotPasswordAC(res.data.info))\r\n            dispatch(isMailSentAC(true))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch(error => {\r\n            dispatch(setAppStatusAC('failed'))\r\n            dispatch(setAppErrorAC('Error: ' + error.response.data.error))\r\n            dispatch(isMailSentAC(false))\r\n        })\r\n\r\n}\r\n\r\n//types\r\ntype ActionsType = ReturnType<typeof ResponseForgotPasswordAC> | ReturnType<typeof isMailSentAC>","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useFormik } from \"formik\";\r\nimport { Button, FormControl, FormGroup, TextField } from \"@material-ui/core\";\r\n\r\nimport styles from './PasswordRecovery.module.css'\r\nimport { AppRootStateType } from \"../../../reducers/store\";\r\nimport { InitialStatePasswordRecoveryType, sentMailTC } from \"../../../reducers/password-recovery-reducer\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n}\r\n\r\nexport const PasswordRecovery = () => {\r\n    const dispatch = useDispatch()\r\n    const passwordRecovery = useSelector<AppRootStateType, InitialStatePasswordRecoveryType>(state => state.passwordRecovery)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: ''\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(sentMailTC(values.email))\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                passwordRecovery.isMailSent\r\n                    ? <div className={styles.sentMailResponse}>\r\n                        the recovery link has been sent on your email\r\n                    </div>\r\n                    : <form onSubmit={formik.handleSubmit}>\r\n                        <FormControl>\r\n                            <FormGroup>\r\n                                <TextField\r\n                                    label=\"Email\"\r\n                                    margin=\"normal\"\r\n                                    {...formik.getFieldProps('email')}\r\n                                />\r\n                                {\r\n                                    formik.touched.email && formik.errors.email\r\n                                        ? <div style={{ color: 'red' }}>{formik.errors.email}</div>\r\n                                        : null\r\n                                }\r\n                                <Button type={'submit'} variant={'contained'} color={'primary'}>Send recovery-link</Button>\r\n                            </FormGroup>\r\n                        </FormControl>\r\n                    </form>\r\n            }\r\n        </div>\r\n\r\n    );\r\n}","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nimport styles from \"./Profile.module.css\"\r\nimport { ResponseUserDataType } from \"../../../api/api\";\r\nimport { AppRootStateType } from \"../../../reducers/store\";\r\n\r\n\r\nexport const Profile = () => {\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.login.isLoggedIn)\r\n    const userProfileData = useSelector<AppRootStateType, ResponseUserDataType | null>(state => state.login.data)\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={'/login'} />\r\n    }\r\n\r\n    return (\r\n        <div className={styles.profile}>\r\n            {userProfileData && <div>\r\n                User name: {userProfileData.name} <br />\r\n                User email: {userProfileData.email} <br />\r\n                User avatar: {userProfileData.avatar} <br />\r\n            </div>}\r\n        </div>\r\n    );\r\n}","import { Dispatch } from \"redux\";\r\nimport { api } from \"../api/api\";\r\nimport { setAppErrorAC } from \"./app-reducer\";\r\n\r\nconst initialState: InitialStateType = {\r\n    passwordIsSet: false\r\n}\r\n\r\nexport type InitialStateType = {\r\n    passwordIsSet: boolean\r\n}\r\n\r\nexport const setNewPasswordReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"SET-NEW-PASSWORD\":\r\n            return { ...state, passwordIsSet: action.passwordIsSet }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const setNewPasswordAC = (passwordIsSet: boolean) => ({\r\n    type: 'SET-NEW-PASSWORD',\r\n    passwordIsSet\r\n}) as const\r\n\r\n//thunks\r\nexport const changePasswordTC = (password: string, resetPasswordToken: string) => (dispatch: Dispatch) => {\r\n    api.recoverPassword(password, resetPasswordToken)\r\n        .then(res => {\r\n            dispatch(setNewPasswordAC(true))\r\n        })\r\n        .catch(error => {\r\n            dispatch(setAppErrorAC('Error: ' + error.response.data.error))\r\n        })\r\n}\r\n\r\n//types\r\ntype ActionsType = ReturnType<typeof setNewPasswordAC>\r\n\r\n","import React from \"react\";\r\nimport { Redirect, useParams } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useFormik } from \"formik\";\r\nimport { Button, FormControl, FormGroup, TextField } from \"@material-ui/core\";\r\n\r\nimport { changePasswordTC, InitialStateType } from \"../../../reducers/set-new-password-reducer\";\r\nimport { AppRootStateType } from \"../../../reducers/store\";\r\n\r\n\r\ntype FormikErrorType = {\r\n    password?: string\r\n    repeatPassword?: string\r\n}\r\n\r\nexport const SetNewPassword = () => {\r\n    const dispatch = useDispatch()\r\n    const newPassword = useSelector<AppRootStateType, InitialStateType>(state => state.newPassword)\r\n    const { resetPasswordToken } = useParams<{ resetPasswordToken: string }>()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            password: '',\r\n            repeatPassword: ''\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 8) {\r\n                errors.password = 'Password must be more than 7 characters';\r\n            }\r\n\r\n            if (!values.repeatPassword) {\r\n                errors.repeatPassword = 'Required';\r\n            } else if (values.password !== values.repeatPassword) {\r\n                errors.repeatPassword = 'Passwords are not equal';\r\n            }\r\n\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(changePasswordTC(values.password, resetPasswordToken))\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n    if (newPassword.passwordIsSet) {\r\n        return <Redirect to={\"/login\"} />\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        {\r\n                            formik.touched.password && formik.errors.password\r\n                                ? <div style={{ color: 'red' }}>{formik.errors.password}</div>\r\n                                : null\r\n                        }\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Repeat password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('repeatPassword')}\r\n                        />\r\n                        {\r\n                            formik.touched.repeatPassword && formik.errors.repeatPassword\r\n                                ? <div style={{ color: 'red' }}>{formik.errors.repeatPassword}</div>\r\n                                : null\r\n                        }\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Set new password</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </div>\r\n    );\r\n}","import { Dispatch } from \"redux\"\r\nimport { api } from \"../api/api\"\r\nimport { setAppErrorAC, setAppStatusAC } from \"./app-reducer\"\r\n\r\nconst initialState = {\r\n    isSignUp: false,\r\n}\r\ntype InitialStateType = {\r\n    isSignUp: boolean\r\n}\r\n\r\nexport const signUpReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SET-IS-SIGN-UP': {\r\n            return { ...state, isSignUp: action.value }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// thunks\r\nexport const signUpTC = (email: string, password: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    api.signUp(email, password)\r\n        .then(res => {\r\n            dispatch(setAppStatusAC('succeeded'))\r\n            dispatch(setIsSignUpAC(true))\r\n        })\r\n        .catch(error => {\r\n            dispatch(setAppStatusAC('failed'))\r\n            dispatch(setAppErrorAC('Error: ' + error.response.data.error))\r\n        })\r\n}\r\n\r\n// actions\r\nexport const setIsSignUpAC = (value: boolean) => ({ type: 'SET-IS-SIGN-UP', value } as const)\r\nexport const setSignUpErrorAC = (error: string | null) => ({ type: 'SET-ERROR-SIGN-UP', error } as const)\r\n\r\n// types\r\ntype ActionsType = ReturnType<typeof setIsSignUpAC> | ReturnType<typeof setSignUpErrorAC>","import { useFormik } from \"formik\";\r\nimport React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { FormControl, FormGroup, TextField, Button } from '@material-ui/core'\r\n\r\nimport { signUpTC } from \"../../../reducers/signUp-reducer\";\r\nimport { AppRootStateType } from \"../../../reducers/store\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    repeatPassword?: string\r\n}\r\n\r\nexport const SignUp = () => {\r\n    const dispatch = useDispatch()\r\n    const isSignUp = useSelector<AppRootStateType, boolean>((state) => state.registration.isSignUp)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            repeatPassword: ''\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 8) {\r\n                errors.password = 'Password must be more than 7 characters';\r\n            }\r\n\r\n            if (!values.repeatPassword) {\r\n                errors.repeatPassword = 'Required';\r\n            } else if (values.password !== values.repeatPassword) {\r\n                errors.repeatPassword = 'Passwords are not equal';\r\n            }\r\n\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(signUpTC(values.email, values.password))\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n    if (isSignUp) {\r\n        return <Redirect to={'/login'} />\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {\r\n                            formik.touched.email && formik.errors.email\r\n                                ? <div style={{ color: 'red' }}>{formik.errors.email}</div>\r\n                                : null\r\n                        }\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        {\r\n                            formik.touched.password && formik.errors.password\r\n                                ? <div style={{ color: 'red' }}>{formik.errors.password}</div>\r\n                                : null\r\n                        }\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Repeat password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('repeatPassword')}\r\n                        />\r\n                        {\r\n                            formik.touched.repeatPassword && formik.errors.repeatPassword\r\n                                ? <div style={{ color: 'red' }}>{formik.errors.repeatPassword}</div>\r\n                                : null\r\n                        }\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Sign up</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </div>\r\n    );\r\n}","import { Dispatch } from \"redux\"\r\nimport { ThunkAction } from \"redux-thunk\"\r\nimport { apiPacks } from \"../api/api\"\r\nimport { setAppErrorAC, setAppErrorActionType, setAppStatusAC, setAppStatusActionType } from \"./app-reducer\"\r\nimport { AppRootStateType } from \"./store\"\r\n\r\n\r\nconst initialState = {\r\n    packs: [],\r\n    columns: [\r\n        { id: 1, name: 'Name' },\r\n        { id: 2, name: 'Amount of cards' },\r\n        { id: 3, name: 'Grade' },\r\n        { id: 4, name: 'Date of updates' }\r\n    ],\r\n    page: 1,\r\n    pageCount: 8,\r\n    cardPacksTotalCount: 8\r\n}\r\n\r\nexport type PackType = {\r\n    _id: string\r\n    name: string\r\n    cardsCount: number\r\n    grade: number\r\n    updated: string\r\n    private?: boolean\r\n}\r\n\r\nexport type ColumnType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\ntype InitialStateType = {\r\n    packs: Array<PackType>\r\n    columns: Array<ColumnType>\r\n    page: number\r\n    pageCount: number\r\n    cardPacksTotalCount: number\r\n}\r\n\r\nexport const packsReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SET-PACKS': {\r\n            return { ...state, packs: action.packs }\r\n        }\r\n        case 'SET-PACKS-TOTAL-COUNT': {\r\n            return { ...state, cardPacksTotalCount: action.cardPacksTotalCount }\r\n        }\r\n        case 'SET-CURRENT-PAGE': {\r\n            return { ...state, page: action.currentPage }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// thunks\r\nexport const getPacksTC = (page: number, pageCount: number) =>\r\n    (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        dispatch(setCurrentPageAC(page))\r\n        apiPacks.getPacks(page, pageCount)\r\n            .then(res => {\r\n                dispatch(setAppStatusAC('succeeded'))\r\n                dispatch(setPacksAC(res.data.cardPacks))\r\n                dispatch(setCardPacksTotalCountAC(res.data.cardPacksTotalCount))\r\n            })\r\n            .catch(error => {\r\n                dispatch(setAppStatusAC('failed'))\r\n                dispatch(setAppErrorAC('Error: ' + error.response.data.error))\r\n            })\r\n    }\r\n\r\nexport const addPackTC = (name: string): ThunkAction<void, AppRootStateType, unknown, ActionsType> =>\r\n    (dispatch, getState) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        const { page, pageCount } = getState().packs\r\n        apiPacks.addPack(name)\r\n            .then(res => {\r\n                dispatch(setAppStatusAC('succeeded'))\r\n                dispatch(getPacksTC(page, pageCount))\r\n            })\r\n            .catch(error => {\r\n                dispatch(setAppStatusAC('failed'))\r\n                dispatch(setAppErrorAC('Error: ' + error.response.data.error))\r\n            })\r\n    }\r\n\r\nexport const deletePackTC = (packID: string): ThunkAction<void, AppRootStateType, unknown, ActionsType> =>\r\n    (dispatch, getState) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        const { page, pageCount } = getState().packs\r\n        apiPacks.deletePack(packID)\r\n            .then(res => {\r\n                dispatch(setAppStatusAC('succeeded'))\r\n                dispatch(getPacksTC(page, pageCount))\r\n            })\r\n            .catch(error => {\r\n                dispatch(setAppStatusAC('failed'))\r\n                dispatch(setAppErrorAC('Error: ' + error.response.data.error))\r\n            })\r\n    }\r\n\r\nexport const updatePackTC = (packID: string): ThunkAction<void, AppRootStateType, unknown, ActionsType> =>\r\n    (dispatch, getState) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        const { page, pageCount } = getState().packs\r\n        apiPacks.updatePack(packID)\r\n            .then(res => {\r\n                dispatch(setAppStatusAC('succeeded'))\r\n                dispatch(getPacksTC(page, pageCount))\r\n            })\r\n            .catch(error => {\r\n                dispatch(setAppStatusAC('failed'))\r\n                dispatch(setAppErrorAC('Error: ' + error.response.data.error))\r\n            })\r\n    }\r\n\r\n// actions\r\nexport const setPacksAC = (packs: Array<PackType>) => ({ type: 'SET-PACKS', packs } as const)\r\nexport const setCurrentPageAC = (currentPage: number) => ({ type: 'SET-CURRENT-PAGE', currentPage } as const)\r\nexport const setCardPacksTotalCountAC = (cardPacksTotalCount: number) => ({ type: 'SET-PACKS-TOTAL-COUNT', cardPacksTotalCount } as const)\r\n\r\n// types\r\ntype ActionsType = ReturnType<typeof setPacksAC>\r\n    | ReturnType<typeof setCurrentPageAC>\r\n    | ReturnType<typeof setCardPacksTotalCountAC>\r\n    | setAppStatusActionType\r\n    | setAppErrorActionType","import React from 'react';\r\nimport { usePagination } from '@material-ui/lab/Pagination';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\ntype PaginationPropsType = {\r\n    totalCount: number\r\n    onPageChanged: (pageNumber: number) => void\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n    nav: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        marginBottom: '13px',\r\n    },\r\n    ul: {\r\n        listStyle: 'none',\r\n        padding: 0,\r\n        margin: 0,\r\n        display: 'flex',\r\n        color: 'black'\r\n    },\r\n});\r\n\r\nexport default function Pagination(props: PaginationPropsType) {\r\n    const classes = useStyles();\r\n    const { items } = usePagination({\r\n        count: props.totalCount,\r\n    });\r\n\r\n    return (\r\n        <nav className={classes.nav}>\r\n            <ul className={classes.ul}>\r\n                {items.map(({ page, type, selected, ...item }, index) => {\r\n                    let children = null;\r\n\r\n                    if (type === 'start-ellipsis' || type === 'end-ellipsis') {\r\n                        children = '…';\r\n                    } else if (type === 'page') {\r\n                        children = (\r\n                            <button type=\"button\" style={{ fontWeight: selected ? 'bold' : undefined, fontSize: '20px', marginRight: '7px' }} {...item} >\r\n                                {page}\r\n                            </button>\r\n                        );\r\n                    } else {\r\n                        children = (\r\n                            <button type=\"button\" style={{ fontSize: '20px', marginRight: '7px' }} {...item} >\r\n                                {type}\r\n                            </button>\r\n                        );\r\n                    }\r\n\r\n                    return <li key={index} onClick={(e) => { props.onPageChanged(page) }}>{children}</li>;\r\n                })}\r\n            </ul>\r\n        </nav>\r\n    );\r\n}","import * as React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport { Delete, Edit } from '@material-ui/icons';\r\nimport { Button } from '@material-ui/core';\r\n\r\n\r\ntype PackPropsType = {\r\n    id: string\r\n    name: string\r\n    cardsCount: number\r\n    grade: number\r\n    updated: string\r\n    deletePack: (packID: string) => void\r\n    updatePack: (packID: string) => void\r\n}\r\n\r\n\r\nexport function Pack(props: PackPropsType) {\r\n\r\n    const { id, name, cardsCount, grade, updated } = props\r\n\r\n    const deletePack = () => {\r\n        props.deletePack(id)\r\n    }\r\n\r\n    const updatePack = () => {\r\n        props.updatePack(id)\r\n    }\r\n\r\n    return (\r\n        <TableRow>\r\n            <TableCell>{name}</TableCell>\r\n            <TableCell>{cardsCount}</TableCell>\r\n            <TableCell>{grade}</TableCell>\r\n            <TableCell>{updated}</TableCell>\r\n            <TableCell>\r\n                <IconButton onClick={updatePack}>\r\n                    <Edit color=\"primary\" />\r\n                </IconButton>\r\n            </TableCell>\r\n            <TableCell>\r\n                <IconButton onClick={deletePack}>\r\n                    <Delete color=\"secondary\" />\r\n                </IconButton>\r\n            </TableCell>\r\n            <TableCell>\r\n                <NavLink to={'/cards/' + id}>Cards</NavLink>\r\n            </TableCell>\r\n        </TableRow>\r\n    )\r\n}","import * as React from 'react';\r\nimport { useEffect } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { AppRootStateType } from '../../../reducers/store';\r\nimport { addPackTC, ColumnType, deletePackTC, getPacksTC, PackType, updatePackTC } from '../../../reducers/packs-reducer';\r\nimport Pagination from '../../common/Pagination/Pagination';\r\nimport { Pack } from './Pack/Pack';\r\n\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport Button from '@material-ui/core/Button';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport Table from '@material-ui/core/Table';\r\n\r\n\r\nexport function Packs() {\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.login.isLoggedIn)\r\n    const packs = useSelector<AppRootStateType, Array<PackType>>(state => state.packs.packs)\r\n    const columns = useSelector<AppRootStateType, Array<ColumnType>>(state => state.packs.columns)\r\n    const cardPacksTotalCount = useSelector<AppRootStateType, number>(state => state.packs.cardPacksTotalCount)\r\n    const pageSize = useSelector<AppRootStateType, number>(state => state.packs.pageCount)\r\n    const currentPage = useSelector<AppRootStateType, number>(state => state.packs.page)\r\n    const pagesAmount = Math.ceil(cardPacksTotalCount / pageSize)\r\n\r\n    const addPack = (e: any, name: string = 'PROJECT-PACK') => {\r\n        dispatch(addPackTC(name))\r\n    }\r\n\r\n    const deletePack = (packID: string) => {\r\n        dispatch(deletePackTC(packID))\r\n    }\r\n\r\n    const updatePack = (packID: string) => {\r\n        dispatch(updatePackTC(packID))\r\n    }\r\n\r\n    const onPageChanged = (pageNumber: number) => {\r\n        dispatch(getPacksTC(pageNumber, pageSize))\r\n    }\r\n\r\n    useEffect(() => {\r\n        dispatch(getPacksTC(currentPage, pageSize))\r\n    }, [])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={'/login'} />\r\n    }\r\n\r\n    // работает, но затирает стиль текущей страницы\r\n    // if (status === 'loading') {\r\n    //     return <Preloader />\r\n    // }\r\n\r\n    return (\r\n        <TableContainer component={Paper}>\r\n            <Table>\r\n                <TableHead>\r\n                    <TableRow >\r\n                        {columns.map(column => {\r\n                            return (\r\n                                <TableCell\r\n                                    key={column.id}\r\n                                    component='th'\r\n                                    style={{ fontWeight: 'bold' }}\r\n                                >{column.name}</TableCell >\r\n                            )\r\n                        })}\r\n                        <TableCell colSpan={2}>\r\n                            <Button color=\"primary\" variant={'contained'} onClick={addPack}>\r\n                                Add pack\r\n                            </Button>\r\n                        </TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {packs.map(pack => <Pack\r\n                        key={pack._id}\r\n                        id={pack._id}\r\n                        name={pack.name}\r\n                        cardsCount={pack.cardsCount}\r\n                        grade={pack.grade}\r\n                        updated={pack.updated}\r\n                        deletePack={deletePack}\r\n                        updatePack={updatePack} />\r\n                    )}\r\n                </TableBody>\r\n            </Table>\r\n            <Pagination totalCount={pagesAmount} onPageChanged={onPageChanged} />\r\n        </TableContainer>\r\n    )\r\n}\r\n","import * as React from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { AppRootStateType } from '../../../reducers/store';\r\nimport { ColumnType } from '../../../reducers/packs-reducer';\r\n\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport Button from '@material-ui/core/Button';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport Table from '@material-ui/core/Table';\r\nimport { CardsStateType } from '../../../reducers/cards-reducer';\r\n\r\n\r\nexport function Cards() {\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.login.isLoggedIn)\r\n    const cards = useSelector<AppRootStateType, CardsStateType>(state => state.cards.cards)\r\n    const columns = useSelector<AppRootStateType, Array<ColumnType>>(state => state.cards.columns)\r\n    const cardsTotalCount = useSelector<AppRootStateType, number>(state => state.cards.cardsTotalCount)\r\n    const pageSize = useSelector<AppRootStateType, number>(state => state.cards.pageCount)\r\n    const currentPage = useSelector<AppRootStateType, number>(state => state.cards.page)\r\n    const pagesAmount = Math.ceil(cardsTotalCount / pageSize)\r\n\r\n    // const addPack = (e: any, name: string = 'PROJECT-PACK') => {\r\n    //     dispatch(addPackTC(name))\r\n    // }\r\n\r\n    // const deletePack = (packID: string) => {\r\n    //     dispatch(deletePackTC(packID))\r\n    // }\r\n\r\n    // const updatePack = (packID: string) => {\r\n    //     dispatch(updatePackTC(packID))\r\n    // }\r\n\r\n    // const onPageChanged = (pageNumber: number) => {\r\n    //     dispatch(getPacksTC(pageNumber, pageSize))\r\n    // }\r\n\r\n    // useEffect(() => {\r\n    //     dispatch(getPacksTC(currentPage, pageSize))\r\n    // }, [])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={'/login'} />\r\n    }\r\n\r\n    // работает, но затирает стиль текущей страницы\r\n    // if (status === 'loading') {\r\n    //     return <Preloader />\r\n    // }\r\n\r\n    return (\r\n        <TableContainer component={Paper}>\r\n            <Table>\r\n                <TableHead>\r\n                    <TableRow >\r\n                        {columns.map(column => {\r\n                            return (\r\n                                <TableCell\r\n                                    key={column.id}\r\n                                    component='th'\r\n                                    style={{ fontWeight: 'bold' }}\r\n                                >{column.name}</TableCell >\r\n                            )\r\n                        })}\r\n                        <TableCell colSpan={2}>\r\n                            <Button color=\"primary\" variant={'contained'} onClick={() => alert('add card')}>\r\n                                Add card\r\n                            </Button>\r\n                        </TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {/* { packs.map(pack => <Pack\r\n                        key={pack._id}\r\n                        id={pack._id}\r\n                        name={pack.name}\r\n                        cardsCount={pack.cardsCount}\r\n                        grade={pack.grade}\r\n                        updated={pack.updated}\r\n                        deletePack={deletePack}\r\n                        updatePack={updatePack} />\r\n                    )} */}\r\n                </TableBody>\r\n            </Table>\r\n            {/* <Pagination totalCount={pagesAmount} onPageChanged={onPageChanged} /> */}\r\n        </TableContainer>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport { Route, Switch, Redirect } from \"react-router-dom\";\r\n\r\nimport styles from './Routes.module.css'\r\nimport { Error404 } from \"../pages/Error404/Error404\";\r\nimport { Login } from \"../pages/Login/Login\";\r\nimport { PasswordRecovery } from \"../pages/PasswordRecovery/PasswordRecovery\";\r\nimport { Profile } from \"../pages/Profile/Profile\";\r\nimport { SetNewPassword } from \"../pages/SetNewPassword/SetNewPassword\";\r\nimport { SignUp } from \"../pages/SignUp/SignUp\";\r\nimport {Packs} from \"../pages/Packs/Packs\";\r\nimport { Cards } from \"../pages/Cards/Cards\";\r\n\r\n\r\nexport const PATH = {\r\n    login: '/login',\r\n    passwordRecovery: '/passwordRecovery',\r\n    profile: '/profile',\r\n    signUp: '/signUp',\r\n    newPassword: '/newPassword',\r\n    error: '/404',\r\n    packs: '/packs',\r\n    cards: '/cards'\r\n}\r\n\r\n\r\nexport const Routes = () => {\r\n    return (\r\n        <div className={styles.currentDisplay}>\r\n            <Switch>\r\n                <Route exact path={'/'} render={() => <Redirect to={PATH.login} />} />\r\n                <Route path={PATH.login} render={() => <Login />} />\r\n                <Route exact path={PATH.signUp} render={() => <SignUp />} />\r\n                <Route exact path={PATH.profile} render={() => <Profile />} />\r\n                <Route exact path={PATH.packs} render={() => <Packs />} />\r\n                <Route exact path={`${PATH.cards}/:id`} render={() => <Cards />} />\r\n                <Route exact path={PATH.passwordRecovery} render={() => <PasswordRecovery />} />\r\n                <Route path={`${PATH.newPassword}/:resetPasswordToken`} render={() => <SetNewPassword />} />\r\n                <Route path={PATH.error} render={() => <Error404 />} />\r\n                <Redirect from={'*'} to={PATH.error} />\r\n            </Switch>\r\n        </div>\r\n    );\r\n}","import React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport { makeStyles, Theme } from \"@material-ui/core/styles\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport Tab from \"@material-ui/core/Tab\";\r\n\r\nimport { PATH } from \"../Routes/Routes\";\r\nimport { AppRootStateType } from \"../../reducers/store\";\r\nimport { logoutTC } from \"../../reducers/login-reducer\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        backgroundColor: theme.palette.background.paper,\r\n    },\r\n}));\r\n\r\nfunction Header() {\r\n    const dispatch = useDispatch()\r\n    const isUserLoggedIn = useSelector<AppRootStateType, boolean>(state => state.login.isLoggedIn)\r\n\r\n    const [selectedTab, setSelectedTab] = useState('');\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleChange = (event: React.ChangeEvent<{}>, newValue: string) => {\r\n        setSelectedTab(newValue);\r\n    };\r\n\r\n    const onLogoutClickHandler = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n    if (isUserLoggedIn) {\r\n        return <div className={classes.root}>\r\n            <AppBar position=\"static\">\r\n                <Tabs value={selectedTab} onChange={handleChange} aria-label=\"header tabs\">\r\n                    <Tab label='profile' value='/profile' component={Link} to={PATH.profile} />\r\n                    <Tab label='packs' value='/packs' component={Link} to={PATH.packs} />\r\n                    <Tab label='logout' onClick={onLogoutClickHandler} />\r\n                </Tabs>\r\n            </AppBar>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <AppBar position=\"static\">\r\n                <Tabs value={selectedTab} onChange={handleChange} aria-label=\"simple tabs example\">\r\n                    <Tab label='login' value='/login' component={Link} to={PATH.login} />\r\n                    <Tab label='sign up' value='/signUp' component={Link} to={PATH.signUp} />\r\n                </Tabs>\r\n            </AppBar>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Header;","import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, { AlertProps } from '@material-ui/lab/Alert'\r\n\r\nimport { AppRootStateType } from '../../reducers/store'\r\nimport { setAppErrorAC } from '../../reducers/app-reducer'\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    const dispatch = useDispatch()\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error);\r\n    const isOpen = error !== null;\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC(null));\r\n    }\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport './App.css'\r\nimport Header from '../Header/Header';\r\nimport { Routes } from \"../Routes/Routes\";\r\nimport { ErrorSnackbar } from '../ErrorSnackbar/ErrorSnackbar';\r\nimport { AppRootStateType } from '../../reducers/store';\r\nimport { Preloader } from '../Preloader/Preloader';\r\nimport { authMeTC } from '../../reducers/login-reducer';\r\nimport { ResponseUserDataType } from '../../api/api';\r\n\r\n\r\nexport const App = () => {\r\n  const dispatch = useDispatch()\r\n  const userProfileData = useSelector<AppRootStateType, ResponseUserDataType | null>(state => state.login.data)\r\n  const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\r\n\r\n  useEffect(() => {\r\n    !userProfileData && dispatch(authMeTC())\r\n  }, [dispatch, userProfileData])\r\n\r\n\r\n  if (!isInitialized) {\r\n    return <Preloader />\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Header />\r\n      <ErrorSnackbar />\r\n      <Routes />\r\n    </div>\r\n  );\r\n}\r\n","import { Dispatch } from \"redux\"\r\nimport { apiCards } from \"../api/api\"\r\nimport { setAppErrorAC, setAppErrorActionType, setAppStatusAC, setAppStatusActionType } from \"./app-reducer\"\r\n\r\n\r\nconst initialState = {\r\n    cards: {},\r\n    columns: [\r\n        { id: 1, name: 'Question' },\r\n        { id: 2, name: 'Answer' },\r\n        { id: 3, name: 'Grade' },\r\n        { id: 4, name: 'Updated' }\r\n    ],\r\n    page: 1,\r\n    pageCount: 8,\r\n    cardsTotalCount: 8\r\n}\r\n\r\nexport type CardType = {\r\n    _id: string\r\n    cardsPack_id: string\r\n    answer: string\r\n    question: string\r\n    grade: number\r\n    updated: string\r\n}\r\n\r\nexport type ColumnType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nexport type CardsStateType = {\r\n    [key: string]: Array<CardType>\r\n}\r\n\r\ntype InitialStateType = {\r\n    cards: CardsStateType\r\n    columns: Array<ColumnType>\r\n    page: number\r\n    pageCount: number\r\n    cardsTotalCount: number\r\n}\r\n\r\n\r\nexport const cardsReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SET-CARDS': {\r\n            return { ...state, [action.packID]: action.cards }\r\n        }\r\n        case 'SET-CARDS-TOTAL-COUNT': {\r\n            return { ...state, cardsTotalCount: action.cardsTotalCount }\r\n        }\r\n        case 'SET-CURRENT-PAGE': {\r\n            return { ...state, page: action.currentPage }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// thunks\r\nexport const getCardsTC = (page: number, pageCount: number, packID: string) =>\r\n    (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        dispatch(setCurrentPageAC(page))\r\n        apiCards.getCards(page, pageCount, packID)\r\n            .then(res => {\r\n                dispatch(setAppStatusAC('succeeded'))\r\n                dispatch(setCardsAC(res.data.cards, packID))\r\n                dispatch(setCardsTotalCountAC(res.data.cardsTotalCount))\r\n            })\r\n            .catch(error => {\r\n                dispatch(setAppStatusAC('failed'))\r\n                dispatch(setAppErrorAC('Error: ' + error.response.data.error))\r\n            })\r\n    }\r\n\r\n// export const addPackTC = (name: string): ThunkAction<void, AppRootStateType, unknown, ActionsType> =>\r\n//     (dispatch, getState) => {\r\n//         dispatch(setAppStatusAC('loading'))\r\n//         const { page, pageCount } = getState().packs\r\n//         apiPacks.addPack(name)\r\n//             .then(res => {\r\n//                 dispatch(setAppStatusAC('succeeded'))\r\n//                 dispatch(getPacksTC(page, pageCount))\r\n//             })\r\n//             .catch(error => {\r\n//                 dispatch(setAppStatusAC('failed'))\r\n//                 dispatch(setAppErrorAC('Error: ' + error.response.data.error))\r\n//             })\r\n//     }\r\n\r\n// export const deletePackTC = (packID: string): ThunkAction<void, AppRootStateType, unknown, ActionsType> =>\r\n//     (dispatch, getState) => {\r\n//         dispatch(setAppStatusAC('loading'))\r\n//         const { page, pageCount } = getState().packs\r\n//         apiPacks.deletePack(packID)\r\n//             .then(res => {\r\n//                 dispatch(setAppStatusAC('succeeded'))\r\n//                 dispatch(getPacksTC(page, pageCount))\r\n//             })\r\n//             .catch(error => {\r\n//                 dispatch(setAppStatusAC('failed'))\r\n//                 dispatch(setAppErrorAC('Error: ' + error.response.data.error))\r\n//             })\r\n//     }\r\n\r\n// export const updatePackTC = (packID: string): ThunkAction<void, AppRootStateType, unknown, ActionsType> =>\r\n//     (dispatch, getState) => {\r\n//         dispatch(setAppStatusAC('loading'))\r\n//         const { page, pageCount } = getState().packs\r\n//         apiPacks.updatePack(packID)\r\n//             .then(res => {\r\n//                 dispatch(setAppStatusAC('succeeded'))\r\n//                 dispatch(getPacksTC(page, pageCount))\r\n//             })\r\n//             .catch(error => {\r\n//                 dispatch(setAppStatusAC('failed'))\r\n//                 dispatch(setAppErrorAC('Error: ' + error.response.data.error))\r\n//             })\r\n//     }\r\n\r\n// actions\r\nexport const setCardsAC = (cards: Array<CardType>, packID: string) => ({ type: 'SET-CARDS', cards, packID } as const)\r\nexport const setCurrentPageAC = (currentPage: number) => ({ type: 'SET-CURRENT-PAGE', currentPage } as const)\r\nexport const setCardsTotalCountAC = (cardsTotalCount: number) => ({ type: 'SET-CARDS-TOTAL-COUNT', cardsTotalCount } as const)\r\n\r\n// types\r\ntype ActionsType = ReturnType<typeof setCardsAC>\r\n    | ReturnType<typeof setCurrentPageAC>\r\n    | ReturnType<typeof setCardsTotalCountAC>\r\n    | setAppStatusActionType\r\n    | setAppErrorActionType","const initialState = {}\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const profileReducer = (state: InitialStateType = initialState, action: any): InitialStateType => {\r\n    switch (action.type) {\r\n        default:\r\n            return state\r\n    }\r\n}","import { cardsReducer } from './cards-reducer';\r\nimport { applyMiddleware, combineReducers } from \"redux\";\r\nimport { createStore } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nimport { loginReducer } from \"./login-reducer\";\r\nimport { passwordRecoveryReducer } from \"./password-recovery-reducer\";\r\nimport { profileReducer } from \"./profile-reducer\";\r\nimport { setNewPasswordReducer } from \"./set-new-password-reducer\";\r\nimport { appReducer } from \"./app-reducer\";\r\nimport { signUpReducer } from \"./signUp-reducer\";\r\nimport { packsReducer } from \"./packs-reducer\";\r\n\r\nconst reducers = combineReducers({\r\n    login: loginReducer,\r\n    registration: signUpReducer,\r\n    profile: profileReducer,\r\n    passwordRecovery: passwordRecoveryReducer,\r\n    newPassword: setNewPasswordReducer,\r\n    app: appReducer,\r\n    packs: packsReducer,\r\n    cards: cardsReducer\r\n});\r\n\r\nexport const store = createStore(reducers, applyMiddleware(thunk));\r\n\r\nexport type AppRootStateType = ReturnType<typeof reducers>\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\nconsole.log(store.getState())","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { HashRouter } from 'react-router-dom';\r\n\r\nimport { App } from './components/App/App';\r\nimport './index.css';\r\nimport { store } from './reducers/store';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n    <HashRouter>\r\n        <Provider store={store}>\r\n            <App />\r\n        </Provider>\r\n    </HashRouter>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginFormContainer\":\"Login_loginFormContainer__2aD1U\",\"forgetPasswordContainer\":\"Login_forgetPasswordContainer__2P8CS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"currentDisplay\":\"Routes_currentDisplay__1z_mw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error404\":\"Error404_error404__3GaOV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"Preloader_loader__2rl41\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sentMailResponse\":\"PasswordRecovery_sentMailResponse__1B0QB\"};"],"sourceRoot":""}